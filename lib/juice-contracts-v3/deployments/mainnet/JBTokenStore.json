{
  "address": "0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        },
        {
          "internalType": "contract IJBFundingCycleStore",
          "name": "_fundingCycleStore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ALREADY_SET",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CONTROLLER_UNAUTHORIZED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EMPTY_NAME",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EMPTY_SYMBOL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EMPTY_TOKEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INSUFFICIENT_FUNDS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INSUFFICIENT_UNCLAIMED_TOKENS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OVERFLOW_ALERT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PROJECT_ALREADY_HAS_TOKEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RECIPIENT_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TOKENS_MUST_HAVE_18_DECIMALS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TOKEN_NOT_FOUND",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TRANSFERS_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UNAUTHORIZED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialUnclaimedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialClaimedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "preferClaimedTokens",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialUnclaimedBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IJBToken",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Issue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "tokensWereClaimed",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "preferClaimedTokens",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IJBToken",
          "name": "newToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferClaimedTokens",
          "type": "bool"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "claimFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingCycleStore",
      "outputs": [
        {
          "internalType": "contract IJBFundingCycleStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "issueFor",
      "outputs": [
        {
          "internalType": "contract IJBToken",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferClaimedTokens",
          "type": "bool"
        }
      ],
      "name": "mintFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBToken",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenOf",
      "outputs": [
        {
          "internalType": "contract IJBToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unclaimedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unclaimedTotalSupplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ccbba76c1117b3575719612febd4d675b3d54637cc31343c1a2be9e11a89c9d",
  "receipt": {
    "to": null,
    "from": "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF",
    "contractAddress": "0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7",
    "transactionIndex": 119,
    "gasUsed": "4168157",
    "logsBloom": "0x
    "blockHash": "0x569128051f46ea3cb1f5754b6b797514afa0d7faff1a5c044ddd3044fcdb06b4",
    "transactionHash": "0x7ccbba76c1117b3575719612febd4d675b3d54637cc31343c1a2be9e11a89c9d",
    "logs": [],
    "blockNumber": 15575457,
    "cumulativeGasUsed": "12446862",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6F3C5afCa0c9eDf3926eF2dDF17c8ae6391afEfb",
    "0xD8B4359143eda5B2d763E127Ed27c77addBc47d3",
    "0x65572FB928b46f9aDB7cfe5A4c41226F636161ea",
    "0x6f18cF9173136c0B5A6eBF45f19D58d3ff2E17e6"
  ],
  "numDeployments": 1,
  "solcInputHash": "7f5ae5369c2a685c882e67f75315b841",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"},{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"_fundingCycleStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ALREADY_SET\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CONTROLLER_UNAUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EMPTY_NAME\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EMPTY_SYMBOL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EMPTY_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_UNCLAIMED_TOKENS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OVERFLOW_ALERT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PROJECT_ALREADY_HAS_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RECIPIENT_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TOKENS_MUST_HAVE_18_DECIMALS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TOKEN_NOT_FOUND\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TRANSFERS_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialUnclaimedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialClaimedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"preferClaimedTokens\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialUnclaimedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IJBToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"tokensWereClaimed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"preferClaimedTokens\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IJBToken\",\"name\":\"newToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferClaimedTokens\",\"type\":\"bool\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingCycleStore\",\"outputs\":[{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"issueFor\",\"outputs\":[{\"internalType\":\"contract IJBToken\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferClaimedTokens\",\"type\":\"bool\"}],\"name\":\"mintFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBToken\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOf\",\"outputs\":[{\"internalType\":\"contract IJBToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unclaimedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unclaimedTotalSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Token balances can be either represented internally or claimed as ERC-20s into wallets. This contract manages these two representations and allows claiming.The total supply of a project's tokens and the balance of each account are calculated in this contract.Each project can bring their own token if they prefer, and swap between tokens at any time.Adheres to - IJBTokenStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.Inherits from - JBControllerUtility: Includes convenience functionality for checking if the message sender is the current controller of the project whose data is being manipulated. JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"_holder\":\"The token holder to get a balance for.\",\"_projectId\":\"The project to get the `_holder`s balance of.\"},\"returns\":{\"balance\":\"The project token balance of the `_holder\"}},\"burnFrom(address,uint256,uint256,bool)\":{\"details\":\"Only a project's current controller can burn its tokens.\",\"params\":{\"_amount\":\"The amount of tokens to burn.\",\"_holder\":\"The address that owns the tokens being burned.\",\"_preferClaimedTokens\":\"A flag indicating whether there's a preference for tokens to burned from the `_holder`s wallet if the project currently has a token contract attached.\",\"_projectId\":\"The ID of the project to which the burned tokens belong.\"}},\"claimFor(address,uint256,uint256)\":{\"details\":\"Only a token holder or an operator specified by the token holder can claim its unclaimed tokens.\",\"params\":{\"_amount\":\"The amount of tokens to claim.\",\"_holder\":\"The owner of the tokens being claimed.\",\"_projectId\":\"The ID of the project whose tokens are being claimed.\"}},\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\",\"_fundingCycleStore\":\"A contract storing all funding cycle configurations.\",\"_operatorStore\":\"A contract storing operator assignments.\",\"_projects\":\"A contract which mints ERC-721's that represent project ownership and transfers.\"}},\"issueFor(uint256,string,string)\":{\"details\":\"Deploys a project's ERC-20 token contract.Only a project's owner or operator can issue its token.\",\"params\":{\"_name\":\"The ERC-20's name.\",\"_projectId\":\"The ID of the project being issued tokens.\",\"_symbol\":\"The ERC-20's symbol.\"},\"returns\":{\"token\":\"The token that was issued.\"}},\"mintFor(address,uint256,uint256,bool)\":{\"details\":\"Only a project's current controller can mint its tokens.\",\"params\":{\"_amount\":\"The amount of tokens to mint.\",\"_holder\":\"The address receiving the new tokens.\",\"_preferClaimedTokens\":\"A flag indicating whether there's a preference for minted tokens to be claimed automatically into the `_holder`s wallet if the project currently has a token contract attached.\",\"_projectId\":\"The ID of the project to which the tokens belong.\"}},\"setFor(uint256,address)\":{\"details\":\"Only a project's owner or operator can set its token.\",\"params\":{\"_projectId\":\"The ID of the project to which the set token belongs.\",\"_token\":\"The new token. \"}},\"totalSupplyOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project to get the total token supply of.\"},\"returns\":{\"totalSupply\":\"The total supply of the project's tokens.\"}},\"transferFrom(address,uint256,address,uint256)\":{\"details\":\"Only a token holder or an operator can transfer its unclaimed tokens.\",\"params\":{\"_amount\":\"The amount of tokens to transfer.\",\"_holder\":\"The address to transfer tokens from.\",\"_projectId\":\"The ID of the project whose tokens are being transferred.\",\"_recipient\":\"The recipient of the tokens.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"The total balance of tokens a holder has for a specified project, including claimed and unclaimed tokens.\"},\"burnFrom(address,uint256,uint256,bool)\":{\"notice\":\"Burns a project's tokens.\"},\"claimFor(address,uint256,uint256)\":{\"notice\":\"Claims internally accounted for tokens into a holder's wallet.\"},\"directory()\":{\"notice\":\" The directory of terminals and controllers for projects.\"},\"fundingCycleStore()\":{\"notice\":\"The contract storing all funding cycle configurations.\"},\"issueFor(uint256,string,string)\":{\"notice\":\"Issues a project's ERC-20 tokens that'll be used when claiming tokens.\"},\"mintFor(address,uint256,uint256,bool)\":{\"notice\":\"Mint new project tokens.\"},\"operatorStore()\":{\"notice\":\" A contract storing operator assignments.\"},\"projects()\":{\"notice\":\"Mints ERC-721's that represent project ownership and transfers.\"},\"setFor(uint256,address)\":{\"notice\":\"Set a project's token if not already set.\"},\"tokenOf(uint256)\":{\"notice\":\"Each project's attached token contract. _projectId The ID of the project to which the token belongs.\"},\"totalSupplyOf(uint256)\":{\"notice\":\"The total supply of tokens for each project, including claimed and unclaimed tokens.\"},\"transferFrom(address,uint256,address,uint256)\":{\"notice\":\"Allows a holder to transfer unclaimed tokens to another account.\"},\"unclaimedBalanceOf(address,uint256)\":{\"notice\":\"Each holder's balance of unclaimed tokens for each project. _holder The holder of balance. _projectId The ID of the project to which the token belongs.\"},\"unclaimedTotalSupplyOf(uint256)\":{\"notice\":\"The total supply of unclaimed tokens for each project. _projectId The ID of the project to which the token belongs.\"}},\"notice\":\"Manage token minting, burning, and account balances.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JBTokenStore.sol\":\"JBTokenStore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3b2ad1fa2949d64c4819626773da0ae6899d6a8e603403c7cae06c3375448b8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n            unchecked {\\n                _approve(sender, _msgSender(), currentAllowance - amount);\\n            }\\n        }\\n\\n        _transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x960c7d0dbd995e42730f1957948bf22145b6be2a279fc7f3cfaad4b19fa4dbb1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20Permit.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../governance/utils/IVotes.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is IVotes, ERC20Permit {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual override returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view virtual override returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual override {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\",\"keccak256\":\"0x94ebd59adc7cc7048788063f03c9bc7219c80e6cb4d7aca3b4810614f2f7a62b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x8a763ef5625e97f5287c7ddd5ede434129069e15d83bf0a68ad10a5e56ccb439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xcc3242e2da994240b4abb0c6c4cf9e2925eec55583e583cfb141d16002c13d7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd72a0ff0d22c0868fdfa802257bc1c11895f5ad9f43bc1558010ffc03d3824b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/JBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol';\\nimport './interfaces/IJBToken.sol';\\n\\n/** \\n  @notice\\n  An ERC-20 token that can be used by a project in the `JBTokenStore`.\\n\\n  @dev\\n  Adheres to -\\n  IJBToken: Allows this contract to be used by projects in the JBTokenStore.\\n\\n  @dev\\n  Inherits from -\\n  ERC20Votes: General token standard for fungible membership with snapshot capabilities sufficient to interact with standard governance contracts. \\n  Ownable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\\n*/\\ncontract JBToken is ERC20Votes, Ownable, IJBToken {\\n  //*********************************************************************//\\n  // --------------------------- custom errors ------------------------- //\\n  //*********************************************************************//\\n  error BAD_PROJECT();\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    The ID of the project that this token should be exclusively used for. Send 0 to support any project. \\n  */\\n  uint256 public immutable override projectId;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    The total supply of this ERC20.\\n\\n    @param _projectId the ID of the project to which the token belongs. This is ignored.\\n\\n    @return The total supply of this ERC20, as a fixed point number.\\n  */\\n  function totalSupply(uint256 _projectId) external view override returns (uint256) {\\n    _projectId; // Prevents unused var compiler and natspec complaints.\\n\\n    return super.totalSupply();\\n  }\\n\\n  /** \\n    @notice\\n    An account's balance of this ERC20.\\n\\n    @param _account The account to get a balance of.\\n    @param _projectId is the ID of the project to which the token belongs. This is ignored.\\n\\n    @return The balance of the `_account` of this ERC20, as a fixed point number with 18 decimals.\\n  */\\n  function balanceOf(address _account, uint256 _projectId)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    _account; // Prevents unused var compiler and natspec complaints.\\n    _projectId; // Prevents unused var compiler and natspec complaints.\\n\\n    return super.balanceOf(_account);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- public views --------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    The number of decimals included in the fixed point accounting of this token.\\n\\n    @return The number of decimals.\\n  */\\n  function decimals() public view override(ERC20, IJBToken) returns (uint8) {\\n    return super.decimals();\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _name The name of the token.\\n    @param _symbol The symbol that the token should be represented by.\\n    @param _projectId The ID of the project that this token should be exclusively used for. Send 0 to support any project.\\n  */\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint256 _projectId\\n  ) ERC20(_name, _symbol) ERC20Permit(_name) {\\n    projectId = _projectId;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    Mints more of the token.\\n\\n    @dev\\n    Only the owner of this contract cant mint more of it.\\n\\n    @param _projectId The ID of the project to which the token belongs. This is ignored.\\n    @param _account The account to mint the tokens for.\\n    @param _amount The amount of tokens to mint, as a fixed point number with 18 decimals.\\n  */\\n  function mint(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external override onlyOwner {\\n    // Can't mint for a wrong project.\\n    if (projectId != 0 && _projectId != projectId) revert BAD_PROJECT();\\n\\n    return _mint(_account, _amount);\\n  }\\n\\n  /** \\n    @notice\\n    Burn some outstanding tokens.\\n\\n    @dev\\n    Only the owner of this contract cant burn some of its supply.\\n\\n    @param _projectId The ID of the project to which the token belongs. This is ignored.\\n    @param _account The account to burn tokens from.\\n    @param _amount The amount of tokens to burn, as a fixed point number with 18 decimals.\\n  */\\n  function burn(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external override onlyOwner {\\n    // Can't burn for a wrong project.\\n    if (projectId != 0 && _projectId != projectId) revert BAD_PROJECT();\\n\\n    return _burn(_account, _amount);\\n  }\\n\\n  /** \\n    @notice\\n    Approves an account to spend tokens on the `msg.sender`s behalf.\\n\\n    @param _projectId the ID of the project to which the token belongs. This is ignored.\\n    @param _spender The address that will be spending tokens on the `msg.sender`s behalf.\\n    @param _amount The amount the `_spender` is allowed to spend.\\n  */\\n  function approve(\\n    uint256 _projectId,\\n    address _spender,\\n    uint256 _amount\\n  ) external override {\\n    // Can't approve for a wrong project.\\n    if (projectId != 0 && _projectId != projectId) revert BAD_PROJECT();\\n\\n    approve(_spender, _amount);\\n  }\\n\\n  /** \\n    @notice\\n    Transfer tokens to an account.\\n    \\n    @param _projectId The ID of the project to which the token belongs. This is ignored.\\n    @param _to The destination address.\\n    @param _amount The amount of the transfer, as a fixed point number with 18 decimals.\\n  */\\n  function transfer(\\n    uint256 _projectId,\\n    address _to,\\n    uint256 _amount\\n  ) external override {\\n    // Can't transfer for a wrong project.\\n    if (projectId != 0 && _projectId != projectId) revert BAD_PROJECT();\\n\\n    transfer(_to, _amount);\\n  }\\n\\n  /** \\n    @notice\\n    Transfer tokens between accounts.\\n\\n    @param _projectId The ID of the project to which the token belongs. This is ignored.\\n    @param _from The originating address.\\n    @param _to The destination address.\\n    @param _amount The amount of the transfer, as a fixed point number with 18 decimals.\\n  */\\n  function transferFrom(\\n    uint256 _projectId,\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) external override {\\n    // Can't transfer for a wrong project.\\n    if (projectId != 0 && _projectId != projectId) revert BAD_PROJECT();\\n\\n    transferFrom(_from, _to, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0x71717bf1ece43cc2337b65f4715222b7ea2950d6e856bc3084073800cb17fc62\",\"license\":\"MIT\"},\"contracts/JBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport './abstract/JBControllerUtility.sol';\\nimport './abstract/JBOperatable.sol';\\nimport './interfaces/IJBTokenStore.sol';\\nimport './libraries/JBFundingCycleMetadataResolver.sol';\\nimport './libraries/JBOperations.sol';\\nimport './JBToken.sol';\\n\\n/**\\n  @notice\\n  Manage token minting, burning, and account balances.\\n\\n  @dev\\n  Token balances can be either represented internally or claimed as ERC-20s into wallets.\\n  This contract manages these two representations and allows claiming.\\n\\n  @dev\\n  The total supply of a project's tokens and the balance of each account are calculated in this contract.\\n\\n  @dev\\n  Each project can bring their own token if they prefer, and swap between tokens at any time.\\n  \\n  @dev\\n  Adheres to -\\n  IJBTokenStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\\n\\n  @dev\\n  Inherits from -\\n  JBControllerUtility: Includes convenience functionality for checking if the message sender is the current controller of the project whose data is being manipulated.\\n  JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.\\n*/\\ncontract JBTokenStore is JBControllerUtility, JBOperatable, IJBTokenStore {\\n  // A library that parses the packed funding cycle metadata into a friendlier format.\\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\\n\\n  //*********************************************************************//\\n  // --------------------------- custom errors ------------------------- //\\n  //*********************************************************************//\\n  error ALREADY_SET();\\n  error EMPTY_NAME();\\n  error EMPTY_SYMBOL();\\n  error EMPTY_TOKEN();\\n  error INSUFFICIENT_FUNDS();\\n  error INSUFFICIENT_UNCLAIMED_TOKENS();\\n  error PROJECT_ALREADY_HAS_TOKEN();\\n  error RECIPIENT_ZERO_ADDRESS();\\n  error TOKEN_NOT_FOUND();\\n  error TOKENS_MUST_HAVE_18_DECIMALS();\\n  error TRANSFERS_PAUSED();\\n  error OVERFLOW_ALERT();\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable override projects;\\n\\n  /**\\n    @notice\\n    The contract storing all funding cycle configurations.\\n  */\\n  IJBFundingCycleStore public immutable override fundingCycleStore;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Each project's attached token contract.\\n\\n    _projectId The ID of the project to which the token belongs.\\n  */\\n  mapping(uint256 => IJBToken) public override tokenOf;\\n\\n  /**\\n    @notice\\n    The total supply of unclaimed tokens for each project.\\n\\n    _projectId The ID of the project to which the token belongs.\\n  */\\n  mapping(uint256 => uint256) public override unclaimedTotalSupplyOf;\\n\\n  /**\\n    @notice\\n    Each holder's balance of unclaimed tokens for each project.\\n\\n    _holder The holder of balance.\\n    _projectId The ID of the project to which the token belongs.\\n  */\\n  mapping(address => mapping(uint256 => uint256)) public override unclaimedBalanceOf;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The total balance of tokens a holder has for a specified project, including claimed and unclaimed tokens.\\n\\n    @param _holder The token holder to get a balance for.\\n    @param _projectId The project to get the `_holder`s balance of.\\n\\n    @return balance The project token balance of the `_holder\\n  */\\n  function balanceOf(address _holder, uint256 _projectId)\\n    external\\n    view\\n    override\\n    returns (uint256 balance)\\n  {\\n    // Get a reference to the holder's unclaimed balance for the project.\\n    balance = unclaimedBalanceOf[_holder][_projectId];\\n\\n    // Get a reference to the project's current token.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // If the project has a current token, add the holder's balance to the total.\\n    if (_token != IJBToken(address(0))) balance = balance + _token.balanceOf(_holder, _projectId);\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------------- public views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The total supply of tokens for each project, including claimed and unclaimed tokens.\\n\\n    @param _projectId The ID of the project to get the total token supply of.\\n\\n    @return totalSupply The total supply of the project's tokens.\\n  */\\n  function totalSupplyOf(uint256 _projectId) public view override returns (uint256 totalSupply) {\\n    // Get a reference to the total supply of the project's unclaimed tokens.\\n    totalSupply = unclaimedTotalSupplyOf[_projectId];\\n\\n    // Get a reference to the project's current token.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // If the project has a current token, add its total supply to the total.\\n    if (_token != IJBToken(address(0))) totalSupply = totalSupply + _token.totalSupply(_projectId);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @param _operatorStore A contract storing operator assignments.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\\n  */\\n  constructor(\\n    IJBOperatorStore _operatorStore,\\n    IJBProjects _projects,\\n    IJBDirectory _directory,\\n    IJBFundingCycleStore _fundingCycleStore\\n  ) JBOperatable(_operatorStore) JBControllerUtility(_directory) {\\n    projects = _projects;\\n    fundingCycleStore = _fundingCycleStore;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Issues a project's ERC-20 tokens that'll be used when claiming tokens.\\n\\n    @dev\\n    Deploys a project's ERC-20 token contract.\\n\\n    @dev\\n    Only a project's owner or operator can issue its token.\\n\\n    @param _projectId The ID of the project being issued tokens.\\n    @param _name The ERC-20's name.\\n    @param _symbol The ERC-20's symbol.\\n\\n    @return token The token that was issued.\\n  */\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  )\\n    external\\n    override\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.ISSUE)\\n    returns (IJBToken token)\\n  {\\n    // There must be a name.\\n    if (bytes(_name).length == 0) revert EMPTY_NAME();\\n\\n    // There must be a symbol.\\n    if (bytes(_symbol).length == 0) revert EMPTY_SYMBOL();\\n\\n    // The project shouldn't already have a token.\\n    if (tokenOf[_projectId] != IJBToken(address(0))) revert PROJECT_ALREADY_HAS_TOKEN();\\n\\n    // Deploy the token contract.\\n    token = new JBToken(_name, _symbol, _projectId);\\n\\n    // Store the token contract.\\n    tokenOf[_projectId] = token;\\n\\n    emit Issue(_projectId, token, _name, _symbol, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Set a project's token if not already set.\\n\\n    @dev\\n    Only a project's owner or operator can set its token.\\n\\n    @param _projectId The ID of the project to which the set token belongs.\\n    @param _token The new token. \\n  */\\n  function setFor(uint256 _projectId, IJBToken _token)\\n    external\\n    override\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.SET_TOKEN)\\n  {\\n    // Can't set to the zero address.\\n    if (_token == IJBToken(address(0))) revert EMPTY_TOKEN();\\n\\n    // Can't set token if already set.\\n    if (tokenOf[_projectId] != IJBToken(address(0))) revert ALREADY_SET();\\n\\n    // Can't change to a token that doesn't use 18 decimals.\\n    if (_token.decimals() != 18) revert TOKENS_MUST_HAVE_18_DECIMALS();\\n\\n    // Store the new token.\\n    tokenOf[_projectId] = _token;\\n\\n    emit Set(_projectId, _token, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Mint new project tokens.\\n\\n    @dev\\n    Only a project's current controller can mint its tokens.\\n\\n    @param _holder The address receiving the new tokens.\\n    @param _projectId The ID of the project to which the tokens belong.\\n    @param _amount The amount of tokens to mint.\\n    @param _preferClaimedTokens A flag indicating whether there's a preference for minted tokens to be claimed automatically into the `_holder`s wallet if the project currently has a token contract attached.\\n  */\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external override onlyController(_projectId) {\\n    // Get a reference to the project's current token.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // Save a reference to whether there exists a token and the caller prefers these claimed tokens.\\n    bool _shouldClaimTokens = _preferClaimedTokens && _token != IJBToken(address(0));\\n\\n    if (_shouldClaimTokens)\\n      // If tokens should be claimed, mint tokens into the holder's wallet.\\n      _token.mint(_projectId, _holder, _amount);\\n    else {\\n      // Otherwise, add the tokens to the unclaimed balance and total supply.\\n      unclaimedBalanceOf[_holder][_projectId] = unclaimedBalanceOf[_holder][_projectId] + _amount;\\n      unclaimedTotalSupplyOf[_projectId] = unclaimedTotalSupplyOf[_projectId] + _amount;\\n    }\\n\\n    // The total supply can't exceed the maximum value storable in a int256.\\n    if (totalSupplyOf(_projectId) > type(uint224).max) revert OVERFLOW_ALERT();\\n\\n    emit Mint(_holder, _projectId, _amount, _shouldClaimTokens, _preferClaimedTokens, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Burns a project's tokens.\\n\\n    @dev\\n    Only a project's current controller can burn its tokens.\\n\\n    @param _holder The address that owns the tokens being burned.\\n    @param _projectId The ID of the project to which the burned tokens belong.\\n    @param _amount The amount of tokens to burn.\\n    @param _preferClaimedTokens A flag indicating whether there's a preference for tokens to burned from the `_holder`s wallet if the project currently has a token contract attached.\\n  */\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external override onlyController(_projectId) {\\n    // Get a reference to the project's current token.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // Get a reference to the amount of unclaimed project tokens the holder has.\\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\\n\\n    // Get a reference to the amount of the project's current token the holder has in their wallet.\\n    uint256 _claimedBalance = _token == IJBToken(address(0))\\n      ? 0\\n      : _token.balanceOf(_holder, _projectId);\\n\\n    // There must be adequate tokens to burn across the holder's claimed and unclaimed balance.\\n    if (_amount > _claimedBalance + _unclaimedBalance) revert INSUFFICIENT_FUNDS();\\n\\n    // The amount of tokens to burn.\\n    uint256 _claimedTokensToBurn;\\n\\n    // Get a reference to how many claimed tokens should be burned\\n    if (_claimedBalance != 0)\\n      if (_preferClaimedTokens)\\n        // If prefer converted, redeem tokens before redeeming unclaimed tokens.\\n        _claimedTokensToBurn = _claimedBalance < _amount ? _claimedBalance : _amount;\\n        // Otherwise, redeem unclaimed tokens before claimed tokens.\\n      else {\\n        unchecked {\\n          _claimedTokensToBurn = _unclaimedBalance < _amount ? _amount - _unclaimedBalance : 0;\\n        }\\n      }\\n\\n    // The amount of unclaimed tokens to redeem.\\n    uint256 _unclaimedTokensToBurn;\\n    unchecked {\\n      _unclaimedTokensToBurn = _amount - _claimedTokensToBurn;\\n    }\\n\\n    // Subtract the tokens from the unclaimed balance and total supply.\\n    if (_unclaimedTokensToBurn > 0) {\\n      // Reduce the holders balance and the total supply.\\n      unclaimedBalanceOf[_holder][_projectId] =\\n        unclaimedBalanceOf[_holder][_projectId] -\\n        _unclaimedTokensToBurn;\\n      unclaimedTotalSupplyOf[_projectId] =\\n        unclaimedTotalSupplyOf[_projectId] -\\n        _unclaimedTokensToBurn;\\n    }\\n\\n    // Burn the claimed tokens.\\n    if (_claimedTokensToBurn > 0) _token.burn(_projectId, _holder, _claimedTokensToBurn);\\n\\n    emit Burn(\\n      _holder,\\n      _projectId,\\n      _amount,\\n      _unclaimedBalance,\\n      _claimedBalance,\\n      _preferClaimedTokens,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Claims internally accounted for tokens into a holder's wallet.\\n\\n    @dev\\n    Only a token holder or an operator specified by the token holder can claim its unclaimed tokens.\\n\\n    @param _holder The owner of the tokens being claimed.\\n    @param _projectId The ID of the project whose tokens are being claimed.\\n    @param _amount The amount of tokens to claim.\\n  */\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external override requirePermission(_holder, _projectId, JBOperations.CLAIM) {\\n    // Get a reference to the project's current token.\\n    IJBToken _token = tokenOf[_projectId];\\n\\n    // The project must have a token contract attached.\\n    if (_token == IJBToken(address(0))) revert TOKEN_NOT_FOUND();\\n\\n    // Get a reference to the amount of unclaimed project tokens the holder has.\\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\\n\\n    // There must be enough unclaimed tokens to claim.\\n    if (_unclaimedBalance < _amount) revert INSUFFICIENT_UNCLAIMED_TOKENS();\\n\\n    unchecked {\\n      // Subtract the claim amount from the holder's unclaimed project token balance.\\n      unclaimedBalanceOf[_holder][_projectId] = _unclaimedBalance - _amount;\\n\\n      // Subtract the claim amount from the project's unclaimed total supply.\\n      unclaimedTotalSupplyOf[_projectId] = unclaimedTotalSupplyOf[_projectId] - _amount;\\n    }\\n\\n    // Mint the equivalent amount of the project's token for the holder.\\n    _token.mint(_projectId, _holder, _amount);\\n\\n    emit Claim(_holder, _projectId, _unclaimedBalance, _amount, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Allows a holder to transfer unclaimed tokens to another account.\\n\\n    @dev\\n    Only a token holder or an operator can transfer its unclaimed tokens.\\n\\n    @param _holder The address to transfer tokens from.\\n    @param _projectId The ID of the project whose tokens are being transferred.\\n    @param _recipient The recipient of the tokens.\\n    @param _amount The amount of tokens to transfer.\\n  */\\n  function transferFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    address _recipient,\\n    uint256 _amount\\n  ) external override requirePermission(_holder, _projectId, JBOperations.TRANSFER) {\\n    // Get a reference to the current funding cycle for the project.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Must not be paused.\\n    if (_fundingCycle.global().pauseTransfers) revert TRANSFERS_PAUSED();\\n\\n    // Can't transfer to the zero address.\\n    if (_recipient == address(0)) revert RECIPIENT_ZERO_ADDRESS();\\n\\n    // Get a reference to the holder's unclaimed project token balance.\\n    uint256 _unclaimedBalance = unclaimedBalanceOf[_holder][_projectId];\\n\\n    // The holder must have enough unclaimed tokens to transfer.\\n    if (_amount > _unclaimedBalance) revert INSUFFICIENT_UNCLAIMED_TOKENS();\\n\\n    // Subtract from the holder's unclaimed token balance.\\n    unchecked {\\n      unclaimedBalanceOf[_holder][_projectId] = _unclaimedBalance - _amount;\\n    }\\n\\n    // Add the unclaimed project tokens to the recipient's balance.\\n    unclaimedBalanceOf[_recipient][_projectId] =\\n      unclaimedBalanceOf[_recipient][_projectId] +\\n      _amount;\\n\\n    emit Transfer(_holder, _projectId, _recipient, _amount, msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0xe56b85fbf1a077ff290839f92823c9249879b8adbf6d50e45a95e53090fdb774\",\"license\":\"MIT\"},\"contracts/abstract/JBControllerUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport './../interfaces/IJBControllerUtility.sol';\\n\\n/** \\n  @notice\\n  Provides tools for contracts with functionality that can only be accessed by a project's controller.\\n\\n  @dev\\n  Adheres to -\\n  IJBControllerUtility: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\\n*/\\nabstract contract JBControllerUtility is IJBControllerUtility {\\n  //*********************************************************************//\\n  // --------------------------- custom errors -------------------------- //\\n  //*********************************************************************//\\n  error CONTROLLER_UNAUTHORIZED();\\n\\n  //*********************************************************************//\\n  // ---------------------------- modifiers ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    Only allows the controller of the specified project to proceed. \\n\\n    @param _projectId The ID of the project. \\n  */\\n  modifier onlyController(uint256 _projectId) {\\n    if (address(directory.controllerOf(_projectId)) != msg.sender) revert CONTROLLER_UNAUTHORIZED();\\n    _;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable override directory;\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n  */\\n  constructor(IJBDirectory _directory) {\\n    directory = _directory;\\n  }\\n}\\n\",\"keccak256\":\"0x23701e4f46df7f37506c3748ff708231b06f39f8fd6f0f4c440832d530fc364f\",\"license\":\"MIT\"},\"contracts/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n\\n  @dev\\n  Adheres to -\\n  IJBOperatable: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  //*********************************************************************//\\n  // --------------------------- custom errors -------------------------- //\\n  //*********************************************************************//\\n  error UNAUTHORIZED();\\n\\n  //*********************************************************************//\\n  // ---------------------------- modifiers ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    Only allows the speficied account or an operator of the account to proceed. \\n\\n    @param _account The account to check for.\\n    @param _domain The domain namespace to look for an operator within. \\n    @param _permissionIndex The index of the permission to check for. \\n  */\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    _requirePermission(_account, _domain, _permissionIndex);\\n    _;\\n  }\\n\\n  /** \\n    @notice\\n    Only allows the speficied account, an operator of the account to proceed, or a truthy override flag. \\n\\n    @param _account The account to check for.\\n    @param _domain The domain namespace to look for an operator within. \\n    @param _permissionIndex The index of the permission to check for. \\n    @param _override A condition to force allowance for.\\n  */\\n  modifier requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) {\\n    _requirePermissionAllowingOverride(_account, _domain, _permissionIndex, _override);\\n    _;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    A contract storing operator assignments.\\n  */\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n  */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- internal views ------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice\\n    Require the message sender is either the account or has the specified permission.\\n\\n    @param _account The account to allow.\\n    @param _domain The domain namespace within which the permission index will be checked.\\n    @param _permissionIndex The permission index that an operator must have within the specified domain to be allowed.\\n  */\\n  function _requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) internal view {\\n    if (\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) revert UNAUTHORIZED();\\n  }\\n\\n  /** \\n    @notice\\n    Require the message sender is either the account, has the specified permission, or the override condition is true.\\n\\n    @param _account The account to allow.\\n    @param _domain The domain namespace within which the permission index will be checked.\\n    @param _domain The permission index that an operator must have within the specified domain to be allowed.\\n    @param _override The override condition to allow.\\n  */\\n  function _requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) internal view {\\n    if (\\n      !_override &&\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) revert UNAUTHORIZED();\\n  }\\n}\\n\",\"keccak256\":\"0x9e62cac5c464eb973f881cf6c373b95aab31d2ddbeb048ee7ad82b5c9ab28add\",\"license\":\"MIT\"},\"contracts/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum JBBallotState {\\n  Active,\\n  Approved,\\n  Failed\\n}\\n\",\"keccak256\":\"0x891fcac63470398b3a11239da7feba6b07d640809fcefd2404303b823d7378f8\",\"license\":\"MIT\"},\"contracts/interfaces/IJBControllerUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBControllerUtility {\\n  function directory() external view returns (IJBDirectory);\\n}\\n\",\"keccak256\":\"0xd875bbeb2412c59b01d9e78884edb4becdcb6f2f3889deef1814921e46497c49\",\"license\":\"MIT\"},\"contracts/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IJBFundingCycleStore.sol';\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBProjects.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, address indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\\n\\n  event SetTerminals(uint256 indexed projectId, IJBPaymentTerminal[] terminals, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBPaymentTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  event SetIsAllowedToSetFirstController(address indexed addr, bool indexed flag, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\\n\\n  function controllerOf(uint256 _projectId) external view returns (address);\\n\\n  function isAllowedToSetFirstController(address _address) external view returns (bool);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBPaymentTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal)\\n    external\\n    view\\n    returns (bool);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBPaymentTerminal);\\n\\n  function setControllerOf(uint256 _projectId, address _controller) external;\\n\\n  function setTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals) external;\\n\\n  function setPrimaryTerminalOf(\\n    uint256 _projectId,\\n    address _token,\\n    IJBPaymentTerminal _terminal\\n  ) external;\\n\\n  function setIsAllowedToSetFirstController(address _address, bool _flag) external;\\n}\\n\",\"keccak256\":\"0x715321646db00514d1355ed43c40cd3f01e94959552fd07797b315d9c49cdb1d\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot is IERC165 {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    uint256 _start\\n  ) external view returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x49553a56209237846bc400cf27f260824a6bd06fd8094a7eb5abb9de75779598\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './../enums/JBBallotState.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    uint256 mustStartAtOrAfter,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBFundingCycle memory);\\n\\n  function latestConfiguredOf(uint256 _projectId)\\n    external\\n    view\\n    returns (JBFundingCycle memory fundingCycle, JBBallotState ballotState);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory fundingCycle);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory fundingCycle);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata,\\n    uint256 _mustStartAtOrAfter\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0xaead823851433be0c2ddc8f8086813e6cd647de3a1bc0f7570a5d6b38c378b5a\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x09a55a91c6ce3625379334271d236cfa47bf36522a91568b406bf06f7239407e\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './../structs/JBOperatorData.sol';\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(JBOperatorData calldata _operatorData) external;\\n\\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0x17f4929812a356984795fafed8cb2be816a025c9a0771d85595ac0b5ff3cffc5\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\ninterface IJBPaymentTerminal is IERC165 {\\n  function acceptsToken(address _token, uint256 _projectId) external view returns (bool);\\n\\n  function currencyForToken(address _token) external view returns (uint256);\\n\\n  function decimalsForToken(address _token) external view returns (uint256);\\n\\n  // Return value must be a fixed point number with 18 decimals.\\n  function currentEthOverflowOf(uint256 _projectId) external view returns (uint256);\\n\\n  function pay(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    address _token,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _metadata\\n  ) external payable returns (uint256 beneficiaryTokenCount);\\n\\n  function addToBalanceOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    address _token,\\n    string calldata _memo,\\n    bytes calldata _metadata\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xb7826f5ed609359ce322c09e83236c47ba385df1c3cad3607e56fd0a2e00eee2\",\"license\":\"MIT\"},\"contracts/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport './../structs/JBProjectMetadata.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    JBProjectMetadata metadata,\\n    address caller\\n  );\\n\\n  event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller);\\n\\n  event SetTokenUriResolver(IJBTokenUriResolver indexed resolver, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function metadataContentOf(uint256 _projectId, uint256 _domain)\\n    external\\n    view\\n    returns (string memory);\\n\\n  function tokenUriResolver() external view returns (IJBTokenUriResolver);\\n\\n  function createFor(address _owner, JBProjectMetadata calldata _metadata)\\n    external\\n    returns (uint256 projectId);\\n\\n  function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external;\\n\\n  function setTokenUriResolver(IJBTokenUriResolver _newResolver) external;\\n}\\n\",\"keccak256\":\"0x7cfc021d0bd7e73b1ba8f4845d7d35e3419d6a14d3d25ca3a8010e7f91062fe4\",\"license\":\"MIT\"},\"contracts/interfaces/IJBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJBToken {\\n  function projectId() external view returns (uint256);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _account, uint256 _projectId) external view returns (uint256);\\n\\n  function mint(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function burn(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function approve(\\n    uint256,\\n    address _spender,\\n    uint256 _amount\\n  ) external;\\n\\n  function transfer(\\n    uint256 _projectId,\\n    address _to,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferFrom(\\n    uint256 _projectId,\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe8969210417736c85d71101bf1c0bd8ebbf9d1e62a93e758148bd5709a6c7097\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IJBFundingCycleStore.sol';\\nimport './IJBProjects.sol';\\nimport './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool tokensWereClaimed,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 initialUnclaimedBalance,\\n    uint256 initialClaimedBalance,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Claim(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 initialUnclaimedBalance,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  event Set(uint256 indexed projectId, IJBToken indexed newToken, address caller);\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\\n\\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\\n\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function setFor(uint256 _projectId, IJBToken _token) external;\\n\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    address _recipient,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x98459e3af050d41dfeffdc97f1c93330207ba450f8ff3613224b49a89eeca9c6\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenUriResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJBTokenUriResolver {\\n  function getUri(uint256 _projectId) external view returns (string memory tokenUri);\\n}\\n\",\"keccak256\":\"0xd267fd8ca7c21c2c71794acdb9a98314c33a35fc559e0bf0897a6686d196d174\",\"license\":\"MIT\"},\"contracts/libraries/JBConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n  @notice\\n  Global constants used across Juicebox contracts.\\n*/\\nlibrary JBConstants {\\n  uint256 public constant MAX_RESERVED_RATE = 10_000;\\n  uint256 public constant MAX_REDEMPTION_RATE = 10_000;\\n  uint256 public constant MAX_DISCOUNT_RATE = 1_000_000_000;\\n  uint256 public constant SPLITS_TOTAL_PERCENT = 1_000_000_000;\\n  uint256 public constant MAX_FEE = 1_000_000_000;\\n  uint256 public constant MAX_FEE_DISCOUNT = 1_000_000_000;\\n}\\n\",\"keccak256\":\"0x34362846a1cd428a8bdedf4ab6857e11402f345cb87b994b2e7fb6d2474b808d\",\"license\":\"MIT\"},\"contracts/libraries/JBFundingCycleMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleMetadata.sol';\\nimport './../structs/JBGlobalFundingCycleMetadata.sol';\\nimport './JBConstants.sol';\\nimport './JBGlobalFundingCycleMetadataResolver.sol';\\n\\nlibrary JBFundingCycleMetadataResolver {\\n  function global(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (JBGlobalFundingCycleMetadata memory)\\n  {\\n    return JBGlobalFundingCycleMetadataResolver.expandMetadata(uint8(_fundingCycle.metadata >> 8));\\n  }\\n\\n  function reservedRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    return uint256(uint16(_fundingCycle.metadata >> 24));\\n  }\\n\\n  function redemptionRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 40));\\n  }\\n\\n  function ballotRedemptionRate(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 56));\\n  }\\n\\n  function payPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 72) & 1) == 1;\\n  }\\n\\n  function distributionsPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 73) & 1) == 1;\\n  }\\n\\n  function redeemPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 74) & 1) == 1;\\n  }\\n\\n  function burnPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 75) & 1) == 1;\\n  }\\n\\n  function mintingAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 76) & 1) == 1;\\n  }\\n\\n  function terminalMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 77) & 1) == 1;\\n  }\\n\\n  function controllerMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 78) & 1) == 1;\\n  }\\n\\n  function shouldHoldFees(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 79) & 1) == 1;\\n  }\\n\\n  function preferClaimedTokenOverride(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 80) & 1) == 1;\\n  }\\n\\n  function useTotalOverflowForRedemptions(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 81) & 1) == 1;\\n  }\\n\\n  function useDataSourceForPay(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return (_fundingCycle.metadata >> 82) & 1 == 1;\\n  }\\n\\n  function useDataSourceForRedeem(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (_fundingCycle.metadata >> 83) & 1 == 1;\\n  }\\n\\n  function dataSource(JBFundingCycle memory _fundingCycle) internal pure returns (address) {\\n    return address(uint160(_fundingCycle.metadata >> 84));\\n  }\\n\\n  function metadata(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    return uint256(uint8(_fundingCycle.metadata >> 244));\\n  }\\n\\n  /**\\n    @notice\\n    Pack the funding cycle metadata.\\n\\n    @param _metadata The metadata to validate and pack.\\n\\n    @return packed The packed uint256 of all metadata params. The first 8 bits specify the version.\\n  */\\n  function packFundingCycleMetadata(JBFundingCycleMetadata memory _metadata)\\n    internal\\n    pure\\n    returns (uint256 packed)\\n  {\\n    // version 1 in the bits 0-7 (8 bits).\\n    packed = 1;\\n    // global metadta in bits 8-23 (16 bits).\\n    packed |=\\n      JBGlobalFundingCycleMetadataResolver.packFundingCycleGlobalMetadata(_metadata.global) <<\\n      8;\\n    // reserved rate in bits 24-39 (16 bits).\\n    packed |= _metadata.reservedRate << 24;\\n    // redemption rate in bits 40-55 (16 bits).\\n    // redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.redemptionRate) << 40;\\n    // ballot redemption rate rate in bits 56-71 (16 bits).\\n    // ballot redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.ballotRedemptionRate) << 56;\\n    // pause pay in bit 72.\\n    if (_metadata.pausePay) packed |= 1 << 72;\\n    // pause tap in bit 73.\\n    if (_metadata.pauseDistributions) packed |= 1 << 73;\\n    // pause redeem in bit 74.\\n    if (_metadata.pauseRedeem) packed |= 1 << 74;\\n    // pause burn in bit 75.\\n    if (_metadata.pauseBurn) packed |= 1 << 75;\\n    // allow minting in bit 76.\\n    if (_metadata.allowMinting) packed |= 1 << 76;\\n    // allow terminal migration in bit 77.\\n    if (_metadata.allowTerminalMigration) packed |= 1 << 77;\\n    // allow controller migration in bit 78.\\n    if (_metadata.allowControllerMigration) packed |= 1 << 78;\\n    // hold fees in bit 79.\\n    if (_metadata.holdFees) packed |= 1 << 79;\\n    // prefer claimed token override in bit 80.\\n    if (_metadata.preferClaimedTokenOverride) packed |= 1 << 80;\\n    // useTotalOverflowForRedemptions in bit 81.\\n    if (_metadata.useTotalOverflowForRedemptions) packed |= 1 << 81;\\n    // use pay data source in bit 82.\\n    if (_metadata.useDataSourceForPay) packed |= 1 << 82;\\n    // use redeem data source in bit 83.\\n    if (_metadata.useDataSourceForRedeem) packed |= 1 << 83;\\n    // data source address in bits 84-243.\\n    packed |= uint256(uint160(address(_metadata.dataSource))) << 84;\\n    // metadata in bits 244-252 (8 bits).\\n    packed |= _metadata.metadata << 244;\\n  }\\n\\n  /**\\n    @notice\\n    Expand the funding cycle metadata.\\n\\n    @param _fundingCycle The funding cycle having its metadata expanded.\\n\\n    @return metadata The metadata object.\\n  */\\n  function expandMetadata(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (JBFundingCycleMetadata memory)\\n  {\\n    return\\n      JBFundingCycleMetadata(\\n        global(_fundingCycle),\\n        reservedRate(_fundingCycle),\\n        redemptionRate(_fundingCycle),\\n        ballotRedemptionRate(_fundingCycle),\\n        payPaused(_fundingCycle),\\n        distributionsPaused(_fundingCycle),\\n        redeemPaused(_fundingCycle),\\n        burnPaused(_fundingCycle),\\n        mintingAllowed(_fundingCycle),\\n        terminalMigrationAllowed(_fundingCycle),\\n        controllerMigrationAllowed(_fundingCycle),\\n        shouldHoldFees(_fundingCycle),\\n        preferClaimedTokenOverride(_fundingCycle),\\n        useTotalOverflowForRedemptions(_fundingCycle),\\n        useDataSourceForPay(_fundingCycle),\\n        useDataSourceForRedeem(_fundingCycle),\\n        dataSource(_fundingCycle),\\n        metadata(_fundingCycle)\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x3d045c38593102cfb6ac67f3ddf2232e1ff5518d6d021423ae2681387599fbd3\",\"license\":\"MIT\"},\"contracts/libraries/JBGlobalFundingCycleMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport './../structs/JBFundingCycleMetadata.sol';\\n\\nlibrary JBGlobalFundingCycleMetadataResolver {\\n  function setTerminalsAllowed(uint8 _data) internal pure returns (bool) {\\n    return (_data & 1) == 1;\\n  }\\n\\n  function setControllerAllowed(uint8 _data) internal pure returns (bool) {\\n    return ((_data >> 1) & 1) == 1;\\n  }\\n\\n  function transfersPaused(uint8 _data) internal pure returns (bool) {\\n    return ((_data >> 2) & 1) == 1;\\n  }\\n\\n  /**\\n    @notice\\n    Pack the global funding cycle metadata.\\n\\n    @param _metadata The metadata to validate and pack.\\n\\n    @return packed The packed uint256 of all global metadata params. The first 8 bits specify the version.\\n  */\\n  function packFundingCycleGlobalMetadata(JBGlobalFundingCycleMetadata memory _metadata)\\n    internal\\n    pure\\n    returns (uint256 packed)\\n  {\\n    // allow set terminals in bit 0.\\n    if (_metadata.allowSetTerminals) packed |= 1;\\n    // allow set controller in bit 1.\\n    if (_metadata.allowSetController) packed |= 1 << 1;\\n    // pause transfers in bit 2.\\n    if (_metadata.pauseTransfers) packed |= 1 << 2;\\n  }\\n\\n  /**\\n    @notice\\n    Expand the global funding cycle metadata.\\n\\n    @param _packedMetadata The packed metadata to expand.\\n\\n    @return metadata The global metadata object.\\n  */\\n  function expandMetadata(uint8 _packedMetadata)\\n    internal\\n    pure\\n    returns (JBGlobalFundingCycleMetadata memory metadata)\\n  {\\n    return\\n      JBGlobalFundingCycleMetadata(\\n        setTerminalsAllowed(_packedMetadata),\\n        setControllerAllowed(_packedMetadata),\\n        transfersPaused(_packedMetadata)\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x0d998f938026edeb755987a79421267cf860801161b5f171206a200b60f1061f\",\"license\":\"MIT\"},\"contracts/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant REDEEM = 2;\\n  uint256 public constant MIGRATE_CONTROLLER = 3;\\n  uint256 public constant MIGRATE_TERMINAL = 4;\\n  uint256 public constant PROCESS_FEES = 5;\\n  uint256 public constant SET_METADATA = 6;\\n  uint256 public constant ISSUE = 7;\\n  uint256 public constant SET_TOKEN = 8;\\n  uint256 public constant MINT = 9;\\n  uint256 public constant BURN = 10;\\n  uint256 public constant CLAIM = 11;\\n  uint256 public constant TRANSFER = 12;\\n  uint256 public constant REQUIRE_CLAIM = 13; // unused in v3\\n  uint256 public constant SET_CONTROLLER = 14;\\n  uint256 public constant SET_TERMINALS = 15;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 16;\\n  uint256 public constant USE_ALLOWANCE = 17;\\n  uint256 public constant SET_SPLITS = 18;\\n}\\n\",\"keccak256\":\"0x7f8e501e6890297f4015b1c27cebdb44fadbf21204bea1f3162f5388c060f690\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\n/** \\n  @member number The funding cycle number for the cycle's project. Each funding cycle has a number that is an increment of the cycle that directly preceded it. Each project's first funding cycle has a number of 1.\\n  @member configuration The timestamp when the parameters for this funding cycle were configured. This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n  @member basedOn The `configuration` of the funding cycle that was active when this cycle was created.\\n  @member start The timestamp marking the moment from which the funding cycle is considered active. It is a unix timestamp measured in seconds.\\n  @member duration The number of seconds the funding cycle lasts for, after which a new funding cycle will start. A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties. If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle. If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  @member weight A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on. For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.\\n  @member discountRate A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`. If it's 0, each funding cycle will have equal weight. If the number is 90%, the next funding cycle will have a 10% smaller weight. This weight is out of `JBConstants.MAX_DISCOUNT_RATE`.\\n  @member ballot An address of a contract that says whether a proposed reconfiguration should be accepted or rejected. It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  @member metadata Extra data that can be associated with a funding cycle.\\n*/\\nstruct JBFundingCycle {\\n  uint256 number;\\n  uint256 configuration;\\n  uint256 basedOn;\\n  uint256 start;\\n  uint256 duration;\\n  uint256 weight;\\n  uint256 discountRate;\\n  IJBFundingCycleBallot ballot;\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0xcdd3ac9b6fa67e62ada88d09b73bc35ade1cd77d43db712289266a788928b4c2\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\n/** \\n  @member duration The number of seconds the funding cycle lasts for, after which a new funding cycle will start. A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties. If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle. If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  @member weight A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on. For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.\\n  @member discountRate A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`. If it's 0, each funding cycle will have equal weight. If the number is 90%, the next funding cycle will have a 10% smaller weight. This weight is out of `JBConstants.MAX_DISCOUNT_RATE`.\\n  @member ballot An address of a contract that says whether a proposed reconfiguration should be accepted or rejected. It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n*/\\nstruct JBFundingCycleData {\\n  uint256 duration;\\n  uint256 weight;\\n  uint256 discountRate;\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0x2aa6368bf4dfc5797e8b02a978293de0c777fae2658de2c825a103587240f3b0\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './JBGlobalFundingCycleMetadata.sol';\\n\\n/** \\n  @member global Data used globally in non-migratable ecosystem contracts.\\n  @member reservedRate The reserved rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_RESERVED_RATE`.\\n  @member redemptionRate The redemption rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\\n  @member ballotRedemptionRate The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\\n  @member pausePay A flag indicating if the pay functionality should be paused during the funding cycle.\\n  @member pauseDistributions A flag indicating if the distribute functionality should be paused during the funding cycle.\\n  @member pauseRedeem A flag indicating if the redeem functionality should be paused during the funding cycle.\\n  @member pauseBurn A flag indicating if the burn functionality should be paused during the funding cycle.\\n  @member allowMinting A flag indicating if minting tokens should be allowed during this funding cycle.\\n  @member allowTerminalMigration A flag indicating if migrating terminals should be allowed during this funding cycle.\\n  @member allowControllerMigration A flag indicating if migrating controllers should be allowed during this funding cycle.\\n  @member holdFees A flag indicating if fees should be held during this funding cycle.\\n  @member preferClaimedTokenOverride A flag indicating if claimed tokens should always be prefered to unclaimed tokens when minting.\\n  @member useTotalOverflowForRedemptions A flag indicating if redemptions should use the project's balance held in all terminals instead of the project's local terminal balance from which the redemption is being fulfilled.\\n  @member useDataSourceForPay A flag indicating if the data source should be used for pay transactions during this funding cycle.\\n  @member useDataSourceForRedeem A flag indicating if the data source should be used for redeem transactions during this funding cycle.\\n  @member dataSource The data source to use during this funding cycle.\\n  @member metadata Metadata of the metadata, up to uint8 in size.\\n*/\\nstruct JBFundingCycleMetadata {\\n  JBGlobalFundingCycleMetadata global;\\n  uint256 reservedRate;\\n  uint256 redemptionRate;\\n  uint256 ballotRedemptionRate;\\n  bool pausePay;\\n  bool pauseDistributions;\\n  bool pauseRedeem;\\n  bool pauseBurn;\\n  bool allowMinting;\\n  bool allowTerminalMigration;\\n  bool allowControllerMigration;\\n  bool holdFees;\\n  bool preferClaimedTokenOverride;\\n  bool useTotalOverflowForRedemptions;\\n  bool useDataSourceForPay;\\n  bool useDataSourceForRedeem;\\n  address dataSource;\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0x783604440cac8d176332eab28166f188ee5c230378c08cfc95fea4f7187dc77d\",\"license\":\"MIT\"},\"contracts/structs/JBGlobalFundingCycleMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** \\n  @member allowSetTerminals A flag indicating if setting terminals should be allowed during this funding cycle.\\n  @member allowSetController A flag indicating if setting a new controller should be allowed during this funding cycle.\\n  @member pauseTransfers A flag indicating if the project token transfer functionality should be paused during the funding cycle.\\n*/\\nstruct JBGlobalFundingCycleMetadata {\\n  bool allowSetTerminals;\\n  bool allowSetController;\\n  bool pauseTransfers;\\n}\\n\",\"keccak256\":\"0x05d85530305fec6d6eca54cdbc2cd9110cbda0146598032b0203aa4b622944ff\",\"license\":\"MIT\"},\"contracts/structs/JBOperatorData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** \\n  @member operator The address of the operator.\\n  @member domain The domain within which the operator is being given permissions. A domain of 0 is a wildcard domain, which gives an operator access to all domains.\\n  @member permissionIndexes The indexes of the permissions the operator is being given.\\n*/\\nstruct JBOperatorData {\\n  address operator;\\n  uint256 domain;\\n  uint256[] permissionIndexes;\\n}\\n\",\"keccak256\":\"0x3b85be7b69515976ee10770776283911666aceca820b0cf4e201ea4dbffeb6f0\",\"license\":\"MIT\"},\"contracts/structs/JBProjectMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** \\n  @member content The metadata content.\\n  @member domain The domain within which the metadata applies.\\n*/\\nstruct JBProjectMetadata {\\n  string content;\\n  uint256 domain;\\n}\\n\",\"keccak256\":\"0x90ad7b1014c0a9f945fe7a2efde9d5de41e40574fa27969070b1d2ff52033ea0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162004c3238038062004c32833981016040819052620000359162000072565b6001600160a01b0391821660805292811660a05290811660c0521660e052620000da565b6001600160a01b03811681146200006f57600080fd5b50565b600080600080608085870312156200008957600080fd5b8451620000968162000059565b6020860151909450620000a98162000059565b6040860151909350620000bc8162000059565b6060860151909250620000cf8162000059565b939692955090935050565b60805160a05160c05160e051614aed620001456000396000818161018e0152611080015260008181610223015281816107270152610df0015260008181610290015281816116a501526117760152600081816102b8015281816109e601526113240152614aed6000f3fe60806040523480156200001157600080fd5b5060043610620001085760003560e01c80638b79543c11620000a3578063ad007d63116200006e578063ad007d63146200028a578063c41c2f2414620002b2578063ceddd3e414620002da578063ea78803f14620002f157600080fd5b80638b79543c146200021d578063906ebd0f1462000245578063a7f2a70b146200025c578063ac689bcd146200027357600080fd5b8063557e715511620000e4578063557e715514620001885780636607955d14620001d657806375b0d9cd14620001ef578063831d7fac146200020657600080fd5b8062fdd58e146200010d5780631412884f14620001375780635287af37146200015a575b600080fd5b620001246200011e366004620018d2565b6200032a565b6040519081526020015b60405180910390f35b620001246200014836600462001901565b60016020526000908152604090205481565b620001246200016b366004620018d2565b600260209081526000928352604080842090915290825290205481565b620001b07f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016200012e565b620001ed620001e73660046200191b565b6200041c565b005b620001246200020036600462001901565b6200061a565b620001ed6200021736600462001953565b620006f8565b620001b07f000000000000000000000000000000000000000000000000000000000000000081565b620001ed6200025636600462001995565b6200099e565b620001b06200026d36600462001a30565b62000dbe565b620001ed6200028436600462001ab1565b6200103d565b620001b07f000000000000000000000000000000000000000000000000000000000000000081565b620001b07f000000000000000000000000000000000000000000000000000000000000000081565b620001ed620002eb36600462001995565b620012dc565b620001b06200030236600462001901565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526002602090815260408083208584528252808320549183905290912054909116801562000415576040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820185905282169062fdd58e90604401602060405180830381865afa158015620003e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000406919062001afe565b62000412908362001b47565b91505b5092915050565b8282600b6200042d8383836200162a565b60008581526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16806200048a576040517f73c463ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8716600090815260026020908152604080832089845290915290205485811015620004f6576040517f83fc8b2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff88811660008181526002602090815260408083208c845282528083208b8703905560019091529081902080548a90039055517f836a1040000000000000000000000000000000000000000000000000000000008152600481018a90526024810191909152604481018890529083169063836a104090606401600060405180830381600087803b1580156200059e57600080fd5b505af1158015620005b3573d6000803e3d6000fd5b505060408051848152602081018a9052338183015290518a935073ffffffffffffffffffffffffffffffffffffffff8c1692507fe718784128df3c3d45fbd6519133fee450494f7cdb2b53830a5087cd47f980829181900360600190a35050505050505050565b600081815260016020908152604080832054918390529091205473ffffffffffffffffffffffffffffffffffffffff168015620006f2576040517fbd85b0390000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff82169063bd85b03990602401602060405180830381865afa158015620006bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006e3919062001afe565b620006ef908362001b47565b91505b50919050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa15801562000784573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007aa919062001b5d565b826008620007ba8383836200162a565b73ffffffffffffffffffffffffffffffffffffffff841662000808576040517f24679e7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008581526020819052604090205473ffffffffffffffffffffffffffffffffffffffff161562000865576040517f97f9d95700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620008b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008d7919062001b84565b60ff1660121462000914576040517fadc38c9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000858152602081815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8816908117909155915133815287917ff2b3bb02e24e3ecd8d6fbce63d308207ce06307b9f7ba575bef710e1e70ac60e910160405180910390a35050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa90602401602060405180830381865afa15801562000a2e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a54919062001b5d565b73ffffffffffffffffffffffffffffffffffffffff161462000aa2576040517fab7f741400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152602081815260408083205473ffffffffffffffffffffffffffffffffffffffff89811685526002845282852089865290935290832054911691821562000b85576040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301526024820189905284169062fdd58e90604401602060405180830381865afa15801562000b59573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b7f919062001afe565b62000b88565b60005b905062000b96828262001b47565b86111562000bd0576040517fe793143800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000811562000c1057851562000bf95786821062000bef578662000bf1565b815b905062000c10565b86831062000c0957600062000c0d565b8287035b90505b80870387821462000cb05773ffffffffffffffffffffffffffffffffffffffff8a1660009081526002602090815260408083208c845290915290205462000c5990829062001ba9565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526002602090815260408083208d845282528083209390935560019052205462000ca090829062001ba9565b60008a8152600160205260409020555b811562000d49576040517f9eea5f66000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff8b8116602483015260448201849052861690639eea5f6690606401600060405180830381600087803b15801562000d2f57600080fd5b505af115801562000d44573d6000803e3d6000fd5b505050505b60408051898152602081018690529081018490528715156060820152336080820152899073ffffffffffffffffffffffffffffffffffffffff8c16907fbe100da6adaa492f7ba1b0de916ae2606126ec7b044d7aa8ec74971a607ceecd9060a00160405180910390a350505050505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa15801562000e4d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e73919062001b5d565b86600762000e838383836200162a565b600087900362000ebf576040517f92bf449d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600085900362000efb576040517f571431a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008981526020819052604090205473ffffffffffffffffffffffffffffffffffffffff161562000f58576040517fa54630ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b878787878c60405162000f6b906200189e565b62000f7b95949392919062001c08565b604051809103906000f08015801562000f98573d6000803e3d6000fd5b5060008a8152602081905260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091559051919550908a907f1b1705bef26552c8f314c5eb80e9c84f02876c2f7f30a7f9ad5cafd17d5fa6da9062001029908c908c908c908c90339062001c46565b60405180910390a350505095945050505050565b8383600c6200104e8383836200162a565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018790526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c29060240161012060405180830381865afa158015620010de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001104919062001cfe565b9050620011118162001823565b60400151156200114d576040517f18cdaf9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff86166200119b576040517fc6587bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff881660009081526002602090815260408083208a84529091529020548086111562001207576040517f83fc8b2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808a1660009081526002602081815260408084208d855282528084208b87039055938b1683529081528282208b8352905220546200125c90879062001b47565b73ffffffffffffffffffffffffffffffffffffffff88811660008181526002602090815260408083208e84528252918290209490945580518a8152339481019490945290928b928d16917fae47e55abe3902569528abe4272b889079230a248aec0659a2939a90354982c6910160405180910390a4505050505050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa90602401602060405180830381865afa1580156200136c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001392919062001b5d565b73ffffffffffffffffffffffffffffffffffffffff1614620013e0576040517fab7f741400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008481526020819052604081205473ffffffffffffffffffffffffffffffffffffffff169083801562001429575073ffffffffffffffffffffffffffffffffffffffff821615155b90508015620014c9576040517f836a10400000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff88811660248301526044820187905283169063836a104090606401600060405180830381600087803b158015620014aa57600080fd5b505af1158015620014bf573d6000803e3d6000fd5b505050506200155e565b73ffffffffffffffffffffffffffffffffffffffff871660009081526002602090815260408083208984529091529020546200150790869062001b47565b73ffffffffffffffffffffffffffffffffffffffff881660009081526002602090815260408083208a84528252808320939093556001905220546200154e90869062001b47565b6000878152600160205260409020555b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff62001586876200061a565b1115620015bf576040517f60c5e71200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080518681528215156020820152851515818301523360608201529051879173ffffffffffffffffffffffffffffffffffffffff8a16917f5dd3ead325af435e56bc762b40de54c96de6071938d18a26414245807591d86f9181900360800190a350505050505050565b3373ffffffffffffffffffffffffffffffffffffffff8416148015906200171557506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f90608401602060405180830381865afa158015620016ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001713919062001d83565b155b8015620017e657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f90608401602060405180830381865afa158015620017be573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017e4919062001d83565b155b156200181e576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6040805160608101825260008082526020820181905291810191909152620018986008836101000151901c604080516060808201835260008083526020808401829052928401528251908101835260018481168114825284811c811681149282019290925260029390931c8116149082015290565b92915050565b612d148062001da483390190565b73ffffffffffffffffffffffffffffffffffffffff81168114620018cf57600080fd5b50565b60008060408385031215620018e657600080fd5b8235620018f381620018ac565b946020939093013593505050565b6000602082840312156200191457600080fd5b5035919050565b6000806000606084860312156200193157600080fd5b83356200193e81620018ac565b95602085013595506040909401359392505050565b600080604083850312156200196757600080fd5b8235915060208301356200197b81620018ac565b809150509250929050565b8015158114620018cf57600080fd5b60008060008060808587031215620019ac57600080fd5b8435620019b981620018ac565b935060208501359250604085013591506060850135620019d98162001986565b939692955090935050565b60008083601f840112620019f757600080fd5b50813567ffffffffffffffff81111562001a1057600080fd5b60208301915083602082850101111562001a2957600080fd5b9250929050565b60008060008060006060868803121562001a4957600080fd5b85359450602086013567ffffffffffffffff8082111562001a6957600080fd5b62001a7789838a01620019e4565b9096509450604088013591508082111562001a9157600080fd5b5062001aa088828901620019e4565b969995985093965092949392505050565b6000806000806080858703121562001ac857600080fd5b843562001ad581620018ac565b935060208501359250604085013562001aee81620018ac565b9396929550929360600135925050565b60006020828403121562001b1157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111562001898576200189862001b18565b60006020828403121562001b7057600080fd5b815162001b7d81620018ac565b9392505050565b60006020828403121562001b9757600080fd5b815160ff8116811462001b7d57600080fd5b8181038181111562001898576200189862001b18565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60608152600062001c1e60608301878962001bbf565b828103602084015262001c3381868862001bbf565b9150508260408301529695505050505050565b60608152600062001c5c60608301878962001bbf565b828103602084015262001c7181868862001bbf565b91505073ffffffffffffffffffffffffffffffffffffffff831660408301529695505050505050565b604051610120810167ffffffffffffffff8111828210171562001ce6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b805162001cf981620018ac565b919050565b6000610120828403121562001d1257600080fd5b62001d1c62001c9a565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015262001d6a60e0840162001cec565b60e0820152610100928301519281019290925250919050565b60006020828403121562001d9657600080fd5b815162001b7d816200198656fe6101806040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610140523480156200003757600080fd5b5060405162002d1438038062002d148339810160408190526200005a9162000258565b6040805180820190915260018152603160f81b602082015283908190818560036200008683826200035a565b5060046200009582826200035a565b5050825160209384012082519284019290922060e08390526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818901819052818301979097526060810194909452608080850193909352308483018190528151808603909301835260c09485019091528151919096012090529290925261012052506200013490503362000141565b6101605250620004269050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001bb57600080fd5b81516001600160401b0380821115620001d857620001d862000193565b604051601f8301601f19908116603f0116810190828211818310171562000203576200020362000193565b816040528381526020925086838588010111156200022057600080fd5b600091505b8382101562000244578582018301518183018401529082019062000225565b600093810190920192909252949350505050565b6000806000606084860312156200026e57600080fd5b83516001600160401b03808211156200028657600080fd5b6200029487838801620001a9565b94506020860151915080821115620002ab57600080fd5b50620002ba86828701620001a9565b925050604084015190509250925092565b600181811c90821680620002e057607f821691505b6020821081036200030157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200035557600081815260208120601f850160051c81016020861015620003305750805b601f850160051c820191505b8181101562000351578281556001016200033c565b5050505b505050565b81516001600160401b0381111562000376576200037662000193565b6200038e81620003878454620002cb565b8462000307565b602080601f831160018114620003c65760008415620003ad5750858301515b600019600386901b1c1916600185901b17855562000351565b600085815260208120601f198616915b82811015620003f757888601518255948401946001909101908401620003d6565b5085821015620004165787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610120516101405161016051612842620004d2600039600081816102df0152818161061901528181610643015281816109650152818161098f015281816109fa01528181610a2401528181610c0601528181610c3001528181611171015261119b01526000610ee7015260006115fe0152600061164d0152600061162801526000611581015260006115ab015260006115d501526128426000f3fe608060405234801561001057600080fd5b506004361061020a5760003560e01c80637ecebe001161012a578063a457c2d7116100bd578063d505accf1161008c578063f1127ed811610071578063f1127ed8146104d4578063f2fde38b14610526578063f8548e361461053957600080fd5b8063d505accf14610488578063dd62ed3e1461049b57600080fd5b8063a457c2d71461043c578063a9059cbb1461044f578063bd85b03914610462578063c3cda5201461047557600080fd5b80638e539e8c116100f95780638e539e8c146103fb57806395d89b411461040e5780639ab24eb0146104165780639eea5f661461042957600080fd5b80637ecebe00146103b1578063836a1040146103c45780638cb0a511146103d75780638da5cb5b146103ea57600080fd5b806339509351116101a25780635c19a95c116101715780635c19a95c146103455780636fcfff451461035857806370a0823114610380578063715018a6146103a957600080fd5b806339509351146102b45780633a46b1a8146102c75780633fafa127146102da578063587cde1e1461030157600080fd5b80631c0f12b6116101de5780631c0f12b61461027557806323b872dd1461028a578063313ce5671461029d5780633644e515146102ac57600080fd5b8062fdd58e1461020f57806306fdde0314610235578063095ea7b31461024a57806318160ddd1461026d575b600080fd5b61022261021d36600461241c565b61054c565b6040519081526020015b60405180910390f35b61023d61056f565b60405161022c9190612446565b61025d61025836600461241c565b610601565b604051901515815260200161022c565b600254610222565b6102886102833660046124b2565b610617565b005b61025d6102983660046124f6565b6106af565b6040516012815260200161022c565b61022261079d565b61025d6102c236600461241c565b6107a7565b6102226102d536600461241c565b6107e3565b6102227f000000000000000000000000000000000000000000000000000000000000000081565b61032d61030f366004612532565b6001600160a01b039081166000908152600660205260409020541690565b6040516001600160a01b03909116815260200161022c565b610288610353366004612532565b610856565b61036b610366366004612532565b610863565b60405163ffffffff909116815260200161022c565b61022261038e366004612532565b6001600160a01b031660009081526020819052604090205490565b610288610885565b6102226103bf366004612532565b6108eb565b6102886103d236600461254d565b610909565b6102886103e536600461254d565b6109f8565b6009546001600160a01b031661032d565b610222610409366004612572565b610a8e565b61023d610aea565b610222610424366004612532565b610af9565b61028861043736600461254d565b610baa565b61025d61044a36600461241c565b610c94565b61025d61045d36600461241c565b610d45565b610222610470366004612572565b610d52565b61028861048336600461259c565b610d5d565b6102886104963660046125f4565b610e93565b6102226104a936600461265e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6104e76104e2366004612691565b610ff7565b60408051825163ffffffff1681526020928301517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16928101929092520161022c565b610288610534366004612532565b611090565b61028861054736600461254d565b61116f565b6001600160a01b0382166000908152602081905260408120545b90505b92915050565b60606003805461057e906126d1565b80601f01602080910402602001604051908101604052809291908181526020018280546105aa906126d1565b80156105f75780601f106105cc576101008083540402835291602001916105f7565b820191906000526020600020905b8154815290600101906020018083116105da57829003601f168201915b5050505050905090565b600061060e3384846111ff565b50600192915050565b7f00000000000000000000000000000000000000000000000000000000000000001580159061066657507f00000000000000000000000000000000000000000000000000000000000000008414155b1561069d576040517fcdceed0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106a88383836106af565b5050505050565b6001600160a01b03831660009081526001602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461078257828110156107755760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61078285338584036111ff565b61078d858585611357565b506001949350505050565b905090565b6000610798611574565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161060e9185906107de90869061274d565b6111ff565b60004382106108345760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161076c565b6001600160a01b0383166000908152600760205260409020610566908361169b565b6108603382611782565b50565b6001600160a01b03811660009081526007602052604081205461056990611813565b6009546001600160a01b031633146108df5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161076c565b6108e96000611893565b565b6001600160a01b038116600090815260056020526040812054610569565b6009546001600160a01b031633146109635760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161076c565b7f0000000000000000000000000000000000000000000000000000000000000000158015906109b257507f00000000000000000000000000000000000000000000000000000000000000008314155b156109e9576040517fcdceed0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109f382826118fd565b505050565b7f000000000000000000000000000000000000000000000000000000000000000015801590610a4757507f00000000000000000000000000000000000000000000000000000000000000008314155b15610a7e576040517fcdceed0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a888282610601565b50505050565b6000438210610adf5760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161076c565b61056960088361169b565b60606004805461057e906126d1565b6001600160a01b0381166000908152600760205260408120548015610b82576001600160a01b0383166000908152600760205260409020610b3b600183612760565b81548110610b4b57610b4b612773565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16610b85565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169392505050565b6009546001600160a01b03163314610c045760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161076c565b7f000000000000000000000000000000000000000000000000000000000000000015801590610c5357507f00000000000000000000000000000000000000000000000000000000000000008314155b15610c8a576040517fcdceed0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109f382826119a9565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610d2e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161076c565b610d3b33858584036111ff565b5060019392505050565b600061060e338484611357565b600061056960025490565b83421115610dad5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161076c565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610e2790610e1f9060a001604051602081830303815290604052805190602001206119c1565b858585611a2a565b9050610e3281611a52565b8614610e805760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161076c565b610e8a8188611782565b50505050505050565b83421115610ee35760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161076c565b60007f0000000000000000000000000000000000000000000000000000000000000000888888610f128c611a52565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610f6d826119c1565b90506000610f7d82878787611a2a565b9050896001600160a01b0316816001600160a01b031614610fe05760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161076c565b610feb8a8a8a6111ff565b50505050505050505050565b60408051808201909152600080825260208201526001600160a01b0383166000908152600760205260409020805463ffffffff841690811061103b5761103b612773565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16918101919091529392505050565b6009546001600160a01b031633146110ea5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161076c565b6001600160a01b0381166111665760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161076c565b61086081611893565b7f0000000000000000000000000000000000000000000000000000000000000000158015906111be57507f00000000000000000000000000000000000000000000000000000000000000008314155b156111f5576040517fcdceed0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a888282610d45565b6001600160a01b03831661127a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b0382166112f65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166113d35760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b03821661144f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b038316600090815260208190526040902054818110156114de5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061151590849061274d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161156191815260200190565b60405180910390a3610a88848484611a7a565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156115cd57507f000000000000000000000000000000000000000000000000000000000000000046145b156115f757507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b8154600090815b818110156116ff5760006116b68284611aac565b9050848682815481106116cb576116cb612773565b60009182526020909120015463ffffffff1611156116eb578092506116f9565b6116f681600161274d565b91505b506116a2565b81156117585784611711600184612760565b8154811061172157611721612773565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661175b565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1695945050505050565b6001600160a01b038281166000818152600660208181526040808420805485845282862054949093528787167fffffffffffffffffffffffff00000000000000000000000000000000000000008416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610a88828483611ac7565b600063ffffffff82111561188f5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f3220626974730000000000000000000000000000000000000000000000000000606482015260840161076c565b5090565b600980546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6119078282611c04565b6002547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff101561199b5760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201527f766572666c6f77696e6720766f74657300000000000000000000000000000000606482015260840161076c565b610a886008611cef83611cfb565b6119b38282611edd565b610a88600861206983611cfb565b60006105696119ce611574565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611a3b87878787612075565b91509150611a4881612180565b5095945050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6001600160a01b038381166000908152600660205260408082205485841683529120546109f392918216911683611ac7565b6000611abb60028484186127a2565b6105669084841661274d565b816001600160a01b0316836001600160a01b031614158015611ae95750600081115b156109f3576001600160a01b03831615611b77576001600160a01b03831660009081526007602052604081208190611b249061206985611cfb565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611b6c929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156109f3576001600160a01b03821660009081526007602052604081208190611bad90611cef85611cfb565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611bf5929190918252602082015260400190565b60405180910390a25050505050565b6001600160a01b038216611c5a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161076c565b8060026000828254611c6c919061274d565b90915550506001600160a01b03821660009081526020819052604081208054839290611c9990849061274d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3611ceb60008383611a7a565b5050565b6000610566828461274d565b825460009081908015611d5b5785611d14600183612760565b81548110611d2457611d24612773565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611d5e565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169250611d8c83858763ffffffff16565b9150600081118015611dca57504386611da6600184612760565b81548110611db657611db6612773565b60009182526020909120015463ffffffff16145b15611e5457611dd88261236c565b86611de4600184612760565b81548110611df457611df4612773565b9060005260206000200160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550611ed4565b856040518060400160405280611e6943611813565b63ffffffff168152602001611e7d8561236c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b6001600160a01b038216611f595760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b03821660009081526020819052604090205481811015611fe85760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612017908490612760565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36109f383600084611a7a565b60006105668284612760565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156120ac5750600090506003612177565b8460ff16601b141580156120c457508460ff16601c14155b156120d55750600090506004612177565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612129573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b03811661217057600060019250925050612177565b9150600090505b94509492505050565b6000816004811115612194576121946127dd565b0361219c5750565b60018160048111156121b0576121b06127dd565b036121fd5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161076c565b6002816004811115612211576122116127dd565b0361225e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161076c565b6003816004811115612272576122726127dd565b036122e55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161076c565b60048160048111156122f9576122f96127dd565b036108605760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161076c565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82111561188f5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f3234206269747300000000000000000000000000000000000000000000000000606482015260840161076c565b80356001600160a01b038116811461241757600080fd5b919050565b6000806040838503121561242f57600080fd5b61243883612400565b946020939093013593505050565b600060208083528351808285015260005b8181101561247357858101830151858201604001528201612457565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b600080600080608085870312156124c857600080fd5b843593506124d860208601612400565b92506124e660408601612400565b9396929550929360600135925050565b60008060006060848603121561250b57600080fd5b61251484612400565b925061252260208501612400565b9150604084013590509250925092565b60006020828403121561254457600080fd5b61056682612400565b60008060006060848603121561256257600080fd5b8335925061252260208501612400565b60006020828403121561258457600080fd5b5035919050565b803560ff8116811461241757600080fd5b60008060008060008060c087890312156125b557600080fd5b6125be87612400565b955060208701359450604087013593506125da6060880161258b565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561260f57600080fd5b61261888612400565b965061262660208901612400565b955060408801359450606088013593506126426080890161258b565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561267157600080fd5b61267a83612400565b915061268860208401612400565b90509250929050565b600080604083850312156126a457600080fd5b6126ad83612400565b9150602083013563ffffffff811681146126c657600080fd5b809150509250929050565b600181811c908216806126e557607f821691505b602082108103611a74577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156105695761056961271e565b818103818111156105695761056961271e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000826127d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea26469706673582212205c23091a3d1f80015510377ececa8eecdc6be2b92c3468cca4f84e12ee6f03e864736f6c63430008100033a26469706673582212207672bd575e56b223b77bde4384f7a58f37d6ea2993a11c2e593756913b87706164736f6c63430008100033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001085760003560e01c80638b79543c11620000a3578063ad007d63116200006e578063ad007d63146200028a578063c41c2f2414620002b2578063ceddd3e414620002da578063ea78803f14620002f157600080fd5b80638b79543c146200021d578063906ebd0f1462000245578063a7f2a70b146200025c578063ac689bcd146200027357600080fd5b8063557e715511620000e4578063557e715514620001885780636607955d14620001d657806375b0d9cd14620001ef578063831d7fac146200020657600080fd5b8062fdd58e146200010d5780631412884f14620001375780635287af37146200015a575b600080fd5b620001246200011e366004620018d2565b6200032a565b6040519081526020015b60405180910390f35b620001246200014836600462001901565b60016020526000908152604090205481565b620001246200016b366004620018d2565b600260209081526000928352604080842090915290825290205481565b620001b07f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016200012e565b620001ed620001e73660046200191b565b6200041c565b005b620001246200020036600462001901565b6200061a565b620001ed6200021736600462001953565b620006f8565b620001b07f000000000000000000000000000000000000000000000000000000000000000081565b620001ed6200025636600462001995565b6200099e565b620001b06200026d36600462001a30565b62000dbe565b620001ed6200028436600462001ab1565b6200103d565b620001b07f000000000000000000000000000000000000000000000000000000000000000081565b620001b07f000000000000000000000000000000000000000000000000000000000000000081565b620001ed620002eb36600462001995565b620012dc565b620001b06200030236600462001901565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526002602090815260408083208584528252808320549183905290912054909116801562000415576040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820185905282169062fdd58e90604401602060405180830381865afa158015620003e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000406919062001afe565b62000412908362001b47565b91505b5092915050565b8282600b6200042d8383836200162a565b60008581526020819052604090205473ffffffffffffffffffffffffffffffffffffffff16806200048a576040517f73c463ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8716600090815260026020908152604080832089845290915290205485811015620004f6576040517f83fc8b2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff88811660008181526002602090815260408083208c845282528083208b8703905560019091529081902080548a90039055517f836a1040000000000000000000000000000000000000000000000000000000008152600481018a90526024810191909152604481018890529083169063836a104090606401600060405180830381600087803b1580156200059e57600080fd5b505af1158015620005b3573d6000803e3d6000fd5b505060408051848152602081018a9052338183015290518a935073ffffffffffffffffffffffffffffffffffffffff8c1692507fe718784128df3c3d45fbd6519133fee450494f7cdb2b53830a5087cd47f980829181900360600190a35050505050505050565b600081815260016020908152604080832054918390529091205473ffffffffffffffffffffffffffffffffffffffff168015620006f2576040517fbd85b0390000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff82169063bd85b03990602401602060405180830381865afa158015620006bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006e3919062001afe565b620006ef908362001b47565b91505b50919050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa15801562000784573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007aa919062001b5d565b826008620007ba8383836200162a565b73ffffffffffffffffffffffffffffffffffffffff841662000808576040517f24679e7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008581526020819052604090205473ffffffffffffffffffffffffffffffffffffffff161562000865576040517f97f9d95700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620008b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008d7919062001b84565b60ff1660121462000914576040517fadc38c9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000858152602081815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8816908117909155915133815287917ff2b3bb02e24e3ecd8d6fbce63d308207ce06307b9f7ba575bef710e1e70ac60e910160405180910390a35050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa90602401602060405180830381865afa15801562000a2e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a54919062001b5d565b73ffffffffffffffffffffffffffffffffffffffff161462000aa2576040517fab7f741400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152602081815260408083205473ffffffffffffffffffffffffffffffffffffffff89811685526002845282852089865290935290832054911691821562000b85576040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301526024820189905284169062fdd58e90604401602060405180830381865afa15801562000b59573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b7f919062001afe565b62000b88565b60005b905062000b96828262001b47565b86111562000bd0576040517fe793143800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000811562000c1057851562000bf95786821062000bef578662000bf1565b815b905062000c10565b86831062000c0957600062000c0d565b8287035b90505b80870387821462000cb05773ffffffffffffffffffffffffffffffffffffffff8a1660009081526002602090815260408083208c845290915290205462000c5990829062001ba9565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526002602090815260408083208d845282528083209390935560019052205462000ca090829062001ba9565b60008a8152600160205260409020555b811562000d49576040517f9eea5f66000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff8b8116602483015260448201849052861690639eea5f6690606401600060405180830381600087803b15801562000d2f57600080fd5b505af115801562000d44573d6000803e3d6000fd5b505050505b60408051898152602081018690529081018490528715156060820152336080820152899073ffffffffffffffffffffffffffffffffffffffff8c16907fbe100da6adaa492f7ba1b0de916ae2606126ec7b044d7aa8ec74971a607ceecd9060a00160405180910390a350505050505050505050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa15801562000e4d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e73919062001b5d565b86600762000e838383836200162a565b600087900362000ebf576040517f92bf449d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600085900362000efb576040517f571431a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008981526020819052604090205473ffffffffffffffffffffffffffffffffffffffff161562000f58576040517fa54630ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b878787878c60405162000f6b906200189e565b62000f7b95949392919062001c08565b604051809103906000f08015801562000f98573d6000803e3d6000fd5b5060008a8152602081905260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091559051919550908a907f1b1705bef26552c8f314c5eb80e9c84f02876c2f7f30a7f9ad5cafd17d5fa6da9062001029908c908c908c908c90339062001c46565b60405180910390a350505095945050505050565b8383600c6200104e8383836200162a565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018790526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c29060240161012060405180830381865afa158015620010de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001104919062001cfe565b9050620011118162001823565b60400151156200114d576040517f18cdaf9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff86166200119b576040517fc6587bab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff881660009081526002602090815260408083208a84529091529020548086111562001207576040517f83fc8b2d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808a1660009081526002602081815260408084208d855282528084208b87039055938b1683529081528282208b8352905220546200125c90879062001b47565b73ffffffffffffffffffffffffffffffffffffffff88811660008181526002602090815260408083208e84528252918290209490945580518a8152339481019490945290928b928d16917fae47e55abe3902569528abe4272b889079230a248aec0659a2939a90354982c6910160405180910390a4505050505050505050565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018490528390339073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa90602401602060405180830381865afa1580156200136c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001392919062001b5d565b73ffffffffffffffffffffffffffffffffffffffff1614620013e0576040517fab7f741400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008481526020819052604081205473ffffffffffffffffffffffffffffffffffffffff169083801562001429575073ffffffffffffffffffffffffffffffffffffffff821615155b90508015620014c9576040517f836a10400000000000000000000000000000000000000000000000000000000081526004810187905273ffffffffffffffffffffffffffffffffffffffff88811660248301526044820187905283169063836a104090606401600060405180830381600087803b158015620014aa57600080fd5b505af1158015620014bf573d6000803e3d6000fd5b505050506200155e565b73ffffffffffffffffffffffffffffffffffffffff871660009081526002602090815260408083208984529091529020546200150790869062001b47565b73ffffffffffffffffffffffffffffffffffffffff881660009081526002602090815260408083208a84528252808320939093556001905220546200154e90869062001b47565b6000878152600160205260409020555b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff62001586876200061a565b1115620015bf576040517f60c5e71200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080518681528215156020820152851515818301523360608201529051879173ffffffffffffffffffffffffffffffffffffffff8a16917f5dd3ead325af435e56bc762b40de54c96de6071938d18a26414245807591d86f9181900360800190a350505050505050565b3373ffffffffffffffffffffffffffffffffffffffff8416148015906200171557506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f90608401602060405180830381865afa158015620016ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001713919062001d83565b155b8015620017e657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f90608401602060405180830381865afa158015620017be573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017e4919062001d83565b155b156200181e576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6040805160608101825260008082526020820181905291810191909152620018986008836101000151901c604080516060808201835260008083526020808401829052928401528251908101835260018481168114825284811c811681149282019290925260029390931c8116149082015290565b92915050565b612d148062001da483390190565b73ffffffffffffffffffffffffffffffffffffffff81168114620018cf57600080fd5b50565b60008060408385031215620018e657600080fd5b8235620018f381620018ac565b946020939093013593505050565b6000602082840312156200191457600080fd5b5035919050565b6000806000606084860312156200193157600080fd5b83356200193e81620018ac565b95602085013595506040909401359392505050565b600080604083850312156200196757600080fd5b8235915060208301356200197b81620018ac565b809150509250929050565b8015158114620018cf57600080fd5b60008060008060808587031215620019ac57600080fd5b8435620019b981620018ac565b935060208501359250604085013591506060850135620019d98162001986565b939692955090935050565b60008083601f840112620019f757600080fd5b50813567ffffffffffffffff81111562001a1057600080fd5b60208301915083602082850101111562001a2957600080fd5b9250929050565b60008060008060006060868803121562001a4957600080fd5b85359450602086013567ffffffffffffffff8082111562001a6957600080fd5b62001a7789838a01620019e4565b9096509450604088013591508082111562001a9157600080fd5b5062001aa088828901620019e4565b969995985093965092949392505050565b6000806000806080858703121562001ac857600080fd5b843562001ad581620018ac565b935060208501359250604085013562001aee81620018ac565b9396929550929360600135925050565b60006020828403121562001b1157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111562001898576200189862001b18565b60006020828403121562001b7057600080fd5b815162001b7d81620018ac565b9392505050565b60006020828403121562001b9757600080fd5b815160ff8116811462001b7d57600080fd5b8181038181111562001898576200189862001b18565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60608152600062001c1e60608301878962001bbf565b828103602084015262001c3381868862001bbf565b9150508260408301529695505050505050565b60608152600062001c5c60608301878962001bbf565b828103602084015262001c7181868862001bbf565b91505073ffffffffffffffffffffffffffffffffffffffff831660408301529695505050505050565b604051610120810167ffffffffffffffff8111828210171562001ce6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b805162001cf981620018ac565b919050565b6000610120828403121562001d1257600080fd5b62001d1c62001c9a565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015262001d6a60e0840162001cec565b60e0820152610100928301519281019290925250919050565b60006020828403121562001d9657600080fd5b815162001b7d816200198656fe6101806040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610140523480156200003757600080fd5b5060405162002d1438038062002d148339810160408190526200005a9162000258565b6040805180820190915260018152603160f81b602082015283908190818560036200008683826200035a565b5060046200009582826200035a565b5050825160209384012082519284019290922060e08390526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818901819052818301979097526060810194909452608080850193909352308483018190528151808603909301835260c09485019091528151919096012090529290925261012052506200013490503362000141565b6101605250620004269050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001bb57600080fd5b81516001600160401b0380821115620001d857620001d862000193565b604051601f8301601f19908116603f0116810190828211818310171562000203576200020362000193565b816040528381526020925086838588010111156200022057600080fd5b600091505b8382101562000244578582018301518183018401529082019062000225565b600093810190920192909252949350505050565b6000806000606084860312156200026e57600080fd5b83516001600160401b03808211156200028657600080fd5b6200029487838801620001a9565b94506020860151915080821115620002ab57600080fd5b50620002ba86828701620001a9565b925050604084015190509250925092565b600181811c90821680620002e057607f821691505b6020821081036200030157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200035557600081815260208120601f850160051c81016020861015620003305750805b601f850160051c820191505b8181101562000351578281556001016200033c565b5050505b505050565b81516001600160401b0381111562000376576200037662000193565b6200038e81620003878454620002cb565b8462000307565b602080601f831160018114620003c65760008415620003ad5750858301515b600019600386901b1c1916600185901b17855562000351565b600085815260208120601f198616915b82811015620003f757888601518255948401946001909101908401620003d6565b5085821015620004165787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610120516101405161016051612842620004d2600039600081816102df0152818161061901528181610643015281816109650152818161098f015281816109fa01528181610a2401528181610c0601528181610c3001528181611171015261119b01526000610ee7015260006115fe0152600061164d0152600061162801526000611581015260006115ab015260006115d501526128426000f3fe608060405234801561001057600080fd5b506004361061020a5760003560e01c80637ecebe001161012a578063a457c2d7116100bd578063d505accf1161008c578063f1127ed811610071578063f1127ed8146104d4578063f2fde38b14610526578063f8548e361461053957600080fd5b8063d505accf14610488578063dd62ed3e1461049b57600080fd5b8063a457c2d71461043c578063a9059cbb1461044f578063bd85b03914610462578063c3cda5201461047557600080fd5b80638e539e8c116100f95780638e539e8c146103fb57806395d89b411461040e5780639ab24eb0146104165780639eea5f661461042957600080fd5b80637ecebe00146103b1578063836a1040146103c45780638cb0a511146103d75780638da5cb5b146103ea57600080fd5b806339509351116101a25780635c19a95c116101715780635c19a95c146103455780636fcfff451461035857806370a0823114610380578063715018a6146103a957600080fd5b806339509351146102b45780633a46b1a8146102c75780633fafa127146102da578063587cde1e1461030157600080fd5b80631c0f12b6116101de5780631c0f12b61461027557806323b872dd1461028a578063313ce5671461029d5780633644e515146102ac57600080fd5b8062fdd58e1461020f57806306fdde0314610235578063095ea7b31461024a57806318160ddd1461026d575b600080fd5b61022261021d36600461241c565b61054c565b6040519081526020015b60405180910390f35b61023d61056f565b60405161022c9190612446565b61025d61025836600461241c565b610601565b604051901515815260200161022c565b600254610222565b6102886102833660046124b2565b610617565b005b61025d6102983660046124f6565b6106af565b6040516012815260200161022c565b61022261079d565b61025d6102c236600461241c565b6107a7565b6102226102d536600461241c565b6107e3565b6102227f000000000000000000000000000000000000000000000000000000000000000081565b61032d61030f366004612532565b6001600160a01b039081166000908152600660205260409020541690565b6040516001600160a01b03909116815260200161022c565b610288610353366004612532565b610856565b61036b610366366004612532565b610863565b60405163ffffffff909116815260200161022c565b61022261038e366004612532565b6001600160a01b031660009081526020819052604090205490565b610288610885565b6102226103bf366004612532565b6108eb565b6102886103d236600461254d565b610909565b6102886103e536600461254d565b6109f8565b6009546001600160a01b031661032d565b610222610409366004612572565b610a8e565b61023d610aea565b610222610424366004612532565b610af9565b61028861043736600461254d565b610baa565b61025d61044a36600461241c565b610c94565b61025d61045d36600461241c565b610d45565b610222610470366004612572565b610d52565b61028861048336600461259c565b610d5d565b6102886104963660046125f4565b610e93565b6102226104a936600461265e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6104e76104e2366004612691565b610ff7565b60408051825163ffffffff1681526020928301517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16928101929092520161022c565b610288610534366004612532565b611090565b61028861054736600461254d565b61116f565b6001600160a01b0382166000908152602081905260408120545b90505b92915050565b60606003805461057e906126d1565b80601f01602080910402602001604051908101604052809291908181526020018280546105aa906126d1565b80156105f75780601f106105cc576101008083540402835291602001916105f7565b820191906000526020600020905b8154815290600101906020018083116105da57829003601f168201915b5050505050905090565b600061060e3384846111ff565b50600192915050565b7f00000000000000000000000000000000000000000000000000000000000000001580159061066657507f00000000000000000000000000000000000000000000000000000000000000008414155b1561069d576040517fcdceed0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106a88383836106af565b5050505050565b6001600160a01b03831660009081526001602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461078257828110156107755760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61078285338584036111ff565b61078d858585611357565b506001949350505050565b905090565b6000610798611574565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161060e9185906107de90869061274d565b6111ff565b60004382106108345760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161076c565b6001600160a01b0383166000908152600760205260409020610566908361169b565b6108603382611782565b50565b6001600160a01b03811660009081526007602052604081205461056990611813565b6009546001600160a01b031633146108df5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161076c565b6108e96000611893565b565b6001600160a01b038116600090815260056020526040812054610569565b6009546001600160a01b031633146109635760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161076c565b7f0000000000000000000000000000000000000000000000000000000000000000158015906109b257507f00000000000000000000000000000000000000000000000000000000000000008314155b156109e9576040517fcdceed0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109f382826118fd565b505050565b7f000000000000000000000000000000000000000000000000000000000000000015801590610a4757507f00000000000000000000000000000000000000000000000000000000000000008314155b15610a7e576040517fcdceed0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a888282610601565b50505050565b6000438210610adf5760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400604482015260640161076c565b61056960088361169b565b60606004805461057e906126d1565b6001600160a01b0381166000908152600760205260408120548015610b82576001600160a01b0383166000908152600760205260409020610b3b600183612760565b81548110610b4b57610b4b612773565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16610b85565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169392505050565b6009546001600160a01b03163314610c045760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161076c565b7f000000000000000000000000000000000000000000000000000000000000000015801590610c5357507f00000000000000000000000000000000000000000000000000000000000000008314155b15610c8a576040517fcdceed0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109f382826119a9565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610d2e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161076c565b610d3b33858584036111ff565b5060019392505050565b600061060e338484611357565b600061056960025490565b83421115610dad5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e61747572652065787069726564000000604482015260640161076c565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610e2790610e1f9060a001604051602081830303815290604052805190602001206119c1565b858585611a2a565b9050610e3281611a52565b8614610e805760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000604482015260640161076c565b610e8a8188611782565b50505050505050565b83421115610ee35760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161076c565b60007f0000000000000000000000000000000000000000000000000000000000000000888888610f128c611a52565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610f6d826119c1565b90506000610f7d82878787611a2a565b9050896001600160a01b0316816001600160a01b031614610fe05760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161076c565b610feb8a8a8a6111ff565b50505050505050505050565b60408051808201909152600080825260208201526001600160a01b0383166000908152600760205260409020805463ffffffff841690811061103b5761103b612773565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16918101919091529392505050565b6009546001600160a01b031633146110ea5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161076c565b6001600160a01b0381166111665760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161076c565b61086081611893565b7f0000000000000000000000000000000000000000000000000000000000000000158015906111be57507f00000000000000000000000000000000000000000000000000000000000000008314155b156111f5576040517fcdceed0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a888282610d45565b6001600160a01b03831661127a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b0382166112f65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166113d35760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b03821661144f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b038316600090815260208190526040902054818110156114de5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061151590849061274d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161156191815260200190565b60405180910390a3610a88848484611a7a565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156115cd57507f000000000000000000000000000000000000000000000000000000000000000046145b156115f757507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b8154600090815b818110156116ff5760006116b68284611aac565b9050848682815481106116cb576116cb612773565b60009182526020909120015463ffffffff1611156116eb578092506116f9565b6116f681600161274d565b91505b506116a2565b81156117585784611711600184612760565b8154811061172157611721612773565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661175b565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1695945050505050565b6001600160a01b038281166000818152600660208181526040808420805485845282862054949093528787167fffffffffffffffffffffffff00000000000000000000000000000000000000008416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610a88828483611ac7565b600063ffffffff82111561188f5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f3220626974730000000000000000000000000000000000000000000000000000606482015260840161076c565b5090565b600980546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6119078282611c04565b6002547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff101561199b5760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201527f766572666c6f77696e6720766f74657300000000000000000000000000000000606482015260840161076c565b610a886008611cef83611cfb565b6119b38282611edd565b610a88600861206983611cfb565b60006105696119ce611574565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611a3b87878787612075565b91509150611a4881612180565b5095945050505050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b6001600160a01b038381166000908152600660205260408082205485841683529120546109f392918216911683611ac7565b6000611abb60028484186127a2565b6105669084841661274d565b816001600160a01b0316836001600160a01b031614158015611ae95750600081115b156109f3576001600160a01b03831615611b77576001600160a01b03831660009081526007602052604081208190611b249061206985611cfb565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611b6c929190918252602082015260400190565b60405180910390a250505b6001600160a01b038216156109f3576001600160a01b03821660009081526007602052604081208190611bad90611cef85611cfb565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611bf5929190918252602082015260400190565b60405180910390a25050505050565b6001600160a01b038216611c5a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161076c565b8060026000828254611c6c919061274d565b90915550506001600160a01b03821660009081526020819052604081208054839290611c9990849061274d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3611ceb60008383611a7a565b5050565b6000610566828461274d565b825460009081908015611d5b5785611d14600183612760565b81548110611d2457611d24612773565b60009182526020909120015464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611d5e565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169250611d8c83858763ffffffff16565b9150600081118015611dca57504386611da6600184612760565b81548110611db657611db6612773565b60009182526020909120015463ffffffff16145b15611e5457611dd88261236c565b86611de4600184612760565b81548110611df457611df4612773565b9060005260206000200160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550611ed4565b856040518060400160405280611e6943611813565b63ffffffff168152602001611e7d8561236c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff90811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b6001600160a01b038216611f595760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b03821660009081526020819052604090205481811015611fe85760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161076c565b6001600160a01b0383166000908152602081905260408120838303905560028054849290612017908490612760565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36109f383600084611a7a565b60006105668284612760565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156120ac5750600090506003612177565b8460ff16601b141580156120c457508460ff16601c14155b156120d55750600090506004612177565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612129573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b03811661217057600060019250925050612177565b9150600090505b94509492505050565b6000816004811115612194576121946127dd565b0361219c5750565b60018160048111156121b0576121b06127dd565b036121fd5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161076c565b6002816004811115612211576122116127dd565b0361225e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161076c565b6003816004811115612272576122726127dd565b036122e55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161076c565b60048160048111156122f9576122f96127dd565b036108605760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161076c565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82111561188f5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f3234206269747300000000000000000000000000000000000000000000000000606482015260840161076c565b80356001600160a01b038116811461241757600080fd5b919050565b6000806040838503121561242f57600080fd5b61243883612400565b946020939093013593505050565b600060208083528351808285015260005b8181101561247357858101830151858201604001528201612457565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b600080600080608085870312156124c857600080fd5b843593506124d860208601612400565b92506124e660408601612400565b9396929550929360600135925050565b60008060006060848603121561250b57600080fd5b61251484612400565b925061252260208501612400565b9150604084013590509250925092565b60006020828403121561254457600080fd5b61056682612400565b60008060006060848603121561256257600080fd5b8335925061252260208501612400565b60006020828403121561258457600080fd5b5035919050565b803560ff8116811461241757600080fd5b60008060008060008060c087890312156125b557600080fd5b6125be87612400565b955060208701359450604087013593506125da6060880161258b565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a03121561260f57600080fd5b61261888612400565b965061262660208901612400565b955060408801359450606088013593506126426080890161258b565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561267157600080fd5b61267a83612400565b915061268860208401612400565b90509250929050565b600080604083850312156126a457600080fd5b6126ad83612400565b9150602083013563ffffffff811681146126c657600080fd5b809150509250929050565b600181811c908216806126e557607f821691505b602082108103611a74577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156105695761056961271e565b818103818111156105695761056961271e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000826127d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea26469706673582212205c23091a3d1f80015510377ececa8eecdc6be2b92c3468cca4f84e12ee6f03e864736f6c63430008100033a26469706673582212207672bd575e56b223b77bde4384f7a58f37d6ea2993a11c2e593756913b87706164736f6c63430008100033",
  "devdoc": {
    "details": "Token balances can be either represented internally or claimed as ERC-20s into wallets. This contract manages these two representations and allows claiming.The total supply of a project's tokens and the balance of each account are calculated in this contract.Each project can bring their own token if they prefer, and swap between tokens at any time.Adheres to - IJBTokenStore: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.Inherits from - JBControllerUtility: Includes convenience functionality for checking if the message sender is the current controller of the project whose data is being manipulated. JBOperatable: Includes convenience functionality for checking a message sender's permissions before executing certain transactions.",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "_holder": "The token holder to get a balance for.",
          "_projectId": "The project to get the `_holder`s balance of."
        },
        "returns": {
          "balance": "The project token balance of the `_holder"
        }
      },
      "burnFrom(address,uint256,uint256,bool)": {
        "details": "Only a project's current controller can burn its tokens.",
        "params": {
          "_amount": "The amount of tokens to burn.",
          "_holder": "The address that owns the tokens being burned.",
          "_preferClaimedTokens": "A flag indicating whether there's a preference for tokens to burned from the `_holder`s wallet if the project currently has a token contract attached.",
          "_projectId": "The ID of the project to which the burned tokens belong."
        }
      },
      "claimFor(address,uint256,uint256)": {
        "details": "Only a token holder or an operator specified by the token holder can claim its unclaimed tokens.",
        "params": {
          "_amount": "The amount of tokens to claim.",
          "_holder": "The owner of the tokens being claimed.",
          "_projectId": "The ID of the project whose tokens are being claimed."
        }
      },
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project.",
          "_fundingCycleStore": "A contract storing all funding cycle configurations.",
          "_operatorStore": "A contract storing operator assignments.",
          "_projects": "A contract which mints ERC-721's that represent project ownership and transfers."
        }
      },
      "issueFor(uint256,string,string)": {
        "details": "Deploys a project's ERC-20 token contract.Only a project's owner or operator can issue its token.",
        "params": {
          "_name": "The ERC-20's name.",
          "_projectId": "The ID of the project being issued tokens.",
          "_symbol": "The ERC-20's symbol."
        },
        "returns": {
          "token": "The token that was issued."
        }
      },
      "mintFor(address,uint256,uint256,bool)": {
        "details": "Only a project's current controller can mint its tokens.",
        "params": {
          "_amount": "The amount of tokens to mint.",
          "_holder": "The address receiving the new tokens.",
          "_preferClaimedTokens": "A flag indicating whether there's a preference for minted tokens to be claimed automatically into the `_holder`s wallet if the project currently has a token contract attached.",
          "_projectId": "The ID of the project to which the tokens belong."
        }
      },
      "setFor(uint256,address)": {
        "details": "Only a project's owner or operator can set its token.",
        "params": {
          "_projectId": "The ID of the project to which the set token belongs.",
          "_token": "The new token. "
        }
      },
      "totalSupplyOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project to get the total token supply of."
        },
        "returns": {
          "totalSupply": "The total supply of the project's tokens."
        }
      },
      "transferFrom(address,uint256,address,uint256)": {
        "details": "Only a token holder or an operator can transfer its unclaimed tokens.",
        "params": {
          "_amount": "The amount of tokens to transfer.",
          "_holder": "The address to transfer tokens from.",
          "_projectId": "The ID of the project whose tokens are being transferred.",
          "_recipient": "The recipient of the tokens."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "The total balance of tokens a holder has for a specified project, including claimed and unclaimed tokens."
      },
      "burnFrom(address,uint256,uint256,bool)": {
        "notice": "Burns a project's tokens."
      },
      "claimFor(address,uint256,uint256)": {
        "notice": "Claims internally accounted for tokens into a holder's wallet."
      },
      "directory()": {
        "notice": " The directory of terminals and controllers for projects."
      },
      "fundingCycleStore()": {
        "notice": "The contract storing all funding cycle configurations."
      },
      "issueFor(uint256,string,string)": {
        "notice": "Issues a project's ERC-20 tokens that'll be used when claiming tokens."
      },
      "mintFor(address,uint256,uint256,bool)": {
        "notice": "Mint new project tokens."
      },
      "operatorStore()": {
        "notice": " A contract storing operator assignments."
      },
      "projects()": {
        "notice": "Mints ERC-721's that represent project ownership and transfers."
      },
      "setFor(uint256,address)": {
        "notice": "Set a project's token if not already set."
      },
      "tokenOf(uint256)": {
        "notice": "Each project's attached token contract. _projectId The ID of the project to which the token belongs."
      },
      "totalSupplyOf(uint256)": {
        "notice": "The total supply of tokens for each project, including claimed and unclaimed tokens."
      },
      "transferFrom(address,uint256,address,uint256)": {
        "notice": "Allows a holder to transfer unclaimed tokens to another account."
      },
      "unclaimedBalanceOf(address,uint256)": {
        "notice": "Each holder's balance of unclaimed tokens for each project. _holder The holder of balance. _projectId The ID of the project to which the token belongs."
      },
      "unclaimedTotalSupplyOf(uint256)": {
        "notice": "The total supply of unclaimed tokens for each project. _projectId The ID of the project to which the token belongs."
      }
    },
    "notice": "Manage token minting, burning, and account balances.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14785,
        "contract": "contracts/JBTokenStore.sol:JBTokenStore",
        "label": "tokenOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_contract(IJBToken)20523)"
      },
      {
        "astId": 14791,
        "contract": "contracts/JBTokenStore.sol:JBTokenStore",
        "label": "unclaimedTotalSupplyOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 14799,
        "contract": "contracts/JBTokenStore.sol:JBTokenStore",
        "label": "unclaimedBalanceOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IJBToken)20523": {
        "encoding": "inplace",
        "label": "contract IJBToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_contract(IJBToken)20523)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IJBToken)",
        "numberOfBytes": "32",
        "value": "t_contract(IJBToken)20523"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}