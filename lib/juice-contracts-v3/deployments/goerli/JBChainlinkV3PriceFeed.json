{
  "address": "0x47C6072ccDb899C016ED07ae8aEb7b2cfFe3C82e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_feed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "INCOMPLETE_ROUND",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NEGATIVE_PRICE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "STALE_PRICE",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        }
      ],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x938dc083d4326912d34ac17f4004b404ca902378e86527d4a2fff7dd317ca4da",
  "receipt": {
    "to": null,
    "from": "0xE9bE6df23C7f9CaBa3005DA2fa2d8714d340D0aF",
    "contractAddress": "0x47C6072ccDb899C016ED07ae8aEb7b2cfFe3C82e",
    "transactionIndex": 31,
    "gasUsed": "381171",
    "logsBloom": "0x
    "blockHash": "0x209fc089dda248814d3838b4f1e955d68afcf9c9fb543a673ed39e1a85c2a37c",
    "transactionHash": "0x938dc083d4326912d34ac17f4004b404ca902378e86527d4a2fff7dd317ca4da",
    "logs": [],
    "blockNumber": 7627977,
    "cumulativeGasUsed": "3132424",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 1,
  "solcInputHash": "7f5ae5369c2a685c882e67f75315b841",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_feed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"INCOMPLETE_ROUND\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NEGATIVE_PRICE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"STALE_PRICE\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Adheres to - IJBPriceFeed: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_feed\":\"The feed to report prices from.\"}},\"currentPrice(uint256)\":{\"params\":{\"_decimals\":\"The number of decimals the returned fixed point price should include.\"},\"returns\":{\"_0\":\"The current price of the feed, as a fixed point number with the specified number of decimals.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"currentPrice(uint256)\":{\"notice\":\" Gets the current price from the feed, normalized to the specified number of decimals.\"},\"feed()\":{\"notice\":\" The feed that prices are reported from.\"}},\"notice\":\" A generalized price feed for the Chainlink AggregatorV3Interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JBChainlinkV3PriceFeed.sol\":\"JBChainlinkV3PriceFeed\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"contracts/JBChainlinkV3PriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\nimport './interfaces/IJBPriceFeed.sol';\\nimport './libraries/JBFixedPointNumber.sol';\\n\\n/** \\n  @notice \\n  A generalized price feed for the Chainlink AggregatorV3Interface.\\n\\n  @dev\\n  Adheres to -\\n  IJBPriceFeed: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.\\n*/\\ncontract JBChainlinkV3PriceFeed is IJBPriceFeed {\\n  // A library that provides utility for fixed point numbers.\\n  using JBFixedPointNumber for uint256;\\n\\n  //*********************************************************************//\\n  // --------------------------- custom errors ------------------------- //\\n  //*********************************************************************//\\n  error STALE_PRICE();\\n  error INCOMPLETE_ROUND();\\n  error NEGATIVE_PRICE();\\n\\n  //*********************************************************************//\\n  // ---------------- public stored immutable properties --------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    The feed that prices are reported from.\\n  */\\n  AggregatorV3Interface public immutable feed;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @notice \\n    Gets the current price from the feed, normalized to the specified number of decimals.\\n\\n    @param _decimals The number of decimals the returned fixed point price should include.\\n\\n    @return The current price of the feed, as a fixed point number with the specified number of decimals.\\n  */\\n  function currentPrice(uint256 _decimals) external view override returns (uint256) {\\n    // Get the latest round information.\\n    (uint80 roundId, int256 _price, , uint256 updatedAt, uint80 answeredInRound) = feed\\n      .latestRoundData();\\n\\n    // Make sure the price isn't stale.\\n    if (answeredInRound < roundId) revert STALE_PRICE();\\n\\n    // Make sure the round is finished.\\n    if (updatedAt == 0) revert INCOMPLETE_ROUND();\\n\\n    // Make sure the price is positive.\\n    if (_price < 0) revert NEGATIVE_PRICE();\\n\\n    // Get a reference to the number of decimals the feed uses.\\n    uint256 _feedDecimals = feed.decimals();\\n\\n    // Return the price, adjusted to the target decimals.\\n    return uint256(_price).adjustDecimals(_feedDecimals, _decimals);\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /** \\n    @param _feed The feed to report prices from.\\n  */\\n  constructor(AggregatorV3Interface _feed) {\\n    feed = _feed;\\n  }\\n}\\n\",\"keccak256\":\"0xc007ddad0204b3f7a93874f0eb12f455aad0adac1ce61e46eb809bf3ea800d0f\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJBPriceFeed {\\n  function currentPrice(uint256 _targetDecimals) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x57c71282fec1b34b00cf991ffed2e36031c393e35bfa7ca5d723eb6572fb7122\",\"license\":\"MIT\"},\"contracts/libraries/JBFixedPointNumber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nlibrary JBFixedPointNumber {\\n  function adjustDecimals(\\n    uint256 _value,\\n    uint256 _decimals,\\n    uint256 _targetDecimals\\n  ) internal pure returns (uint256) {\\n    // If decimals need adjusting, multiply or divide the price by the decimal adjuster to get the normalized result.\\n    if (_targetDecimals == _decimals) return _value;\\n    else if (_targetDecimals > _decimals) return _value * 10**(_targetDecimals - _decimals);\\n    else return _value / 10**(_decimals - _targetDecimals);\\n  }\\n}\\n\",\"keccak256\":\"0x18efac48269f3a3bd7e9a1c770776f950e0afa86769e6f8b128002c3b8c6742c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161068738038061068783398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516105f06100976000396000818160400152818160b7015261021701526105f06000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806337a7b7d81461003b5780637a3c4c171461008c575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61009f61009a366004610323565b6100ad565b604051908152602001610083565b60008060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610120573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610144919061035b565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff16101561019f576040517f9cd6c6ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000036101d8576040517e56b3a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000831215610213576040517fb6cc0ca100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a491906103ab565b60ff1690506102b48482896102bf565b979650505050505050565b60008282036102cf57508261031c565b828211156102fd576102e183836103fd565b6102ec90600a610536565b6102f69085610542565b905061031c565b61030782846103fd565b61031290600a610536565b6102f6908561057f565b9392505050565b60006020828403121561033557600080fd5b5035919050565b805169ffffffffffffffffffff8116811461035657600080fd5b919050565b600080600080600060a0868803121561037357600080fd5b61037c8661033c565b945060208601519350604086015192506060860151915061039f6080870161033c565b90509295509295909350565b6000602082840312156103bd57600080fd5b815160ff8116811461031c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610410576104106103ce565b92915050565b600181815b8085111561046f57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610455576104556103ce565b8085161561046257918102915b93841c939080029061041b565b509250929050565b60008261048657506001610410565b8161049357506000610410565b81600181146104a957600281146104b3576104cf565b6001915050610410565b60ff8411156104c4576104c46103ce565b50506001821b610410565b5060208310610133831016604e8410600b84101617156104f2575081810a610410565b6104fc8383610416565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561052e5761052e6103ce565b029392505050565b600061031c8383610477565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561057a5761057a6103ce565b500290565b6000826105b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea264697066735822122012bb14f736313a13fef05d419ea613a5dc2bc02d6dbea9cabd3697f1762dccf564736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806337a7b7d81461003b5780637a3c4c171461008c575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61009f61009a366004610323565b6100ad565b604051908152602001610083565b60008060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610120573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610144919061035b565b9450945050935093508369ffffffffffffffffffff168169ffffffffffffffffffff16101561019f576040517f9cd6c6ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000036101d8576040517e56b3a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000831215610213576040517fb6cc0ca100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a491906103ab565b60ff1690506102b48482896102bf565b979650505050505050565b60008282036102cf57508261031c565b828211156102fd576102e183836103fd565b6102ec90600a610536565b6102f69085610542565b905061031c565b61030782846103fd565b61031290600a610536565b6102f6908561057f565b9392505050565b60006020828403121561033557600080fd5b5035919050565b805169ffffffffffffffffffff8116811461035657600080fd5b919050565b600080600080600060a0868803121561037357600080fd5b61037c8661033c565b945060208601519350604086015192506060860151915061039f6080870161033c565b90509295509295909350565b6000602082840312156103bd57600080fd5b815160ff8116811461031c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610410576104106103ce565b92915050565b600181815b8085111561046f57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610455576104556103ce565b8085161561046257918102915b93841c939080029061041b565b509250929050565b60008261048657506001610410565b8161049357506000610410565b81600181146104a957600281146104b3576104cf565b6001915050610410565b60ff8411156104c4576104c46103ce565b50506001821b610410565b5060208310610133831016604e8410600b84101617156104f2575081810a610410565b6104fc8383610416565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561052e5761052e6103ce565b029392505050565b600061031c8383610477565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561057a5761057a6103ce565b500290565b6000826105b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea264697066735822122012bb14f736313a13fef05d419ea613a5dc2bc02d6dbea9cabd3697f1762dccf564736f6c63430008100033",
  "devdoc": {
    "details": "Adheres to - IJBPriceFeed: General interface for the methods in this contract that interact with the blockchain's state according to the protocol's rules.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_feed": "The feed to report prices from."
        }
      },
      "currentPrice(uint256)": {
        "params": {
          "_decimals": "The number of decimals the returned fixed point price should include."
        },
        "returns": {
          "_0": "The current price of the feed, as a fixed point number with the specified number of decimals."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "currentPrice(uint256)": {
        "notice": " Gets the current price from the feed, normalized to the specified number of decimals."
      },
      "feed()": {
        "notice": " The feed that prices are reported from."
      }
    },
    "notice": " A generalized price feed for the Chainlink AggregatorV3Interface.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}